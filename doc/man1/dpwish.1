'\"
'\" Copyright (c) 1990 The Regents of the University of California.
'\" All rights reserved.
'\"
'\" Permission is hereby granted, without written agreement and without
'\" license or royalty fees, to use, copy, modify, and distribute this
'\" documentation for any purpose, provided that the above copyright
'\" notice and the following two paragraphs appear in all copies.
'\"
'\" IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY
'\" FOR DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES
'\" ARISING OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF THE UNIVERSITY OF
'\" CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'\"
'\" THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
'\" INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
'\" AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
'\" ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATION TO
'\" PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
'\" 
.\" The definitions below are for supplemental macros used in Tcl/Tk
.\" manual entries.
.\"
.\" .HS name section [date [version]]
.\"	Replacement for .TH in other man pages.  See below for valid
.\"	section names.
.\"
.\" .AP type name in/out [indent]
.\"	Start paragraph describing an argument to a library procedure.
.\"	type is type of argument (int, etc.), in/out is either "in", "out",
.\"	or "in/out" to describe whether procedure reads or modifies arg,
.\"	and indent is equivalent to second arg of .IP (shouldn't ever be
.\"	needed;  use .AS below instead)
.\"
.\" .AS [type [name]]
.\"	Give maximum sizes of arguments for setting tab stops.  Type and
.\"	name are examples of largest possible arguments that will be passed
.\"	to .AP later.  If args are omitted, default tab stops are used.
.\"
.\" .BS
.\"	Start box enclosure.  From here until next .BE, everything will be
.\"	enclosed in one large box.
.\"
.\" .BE
.\"	End of box enclosure.
.\"
.\" .VS
.\"	Begin vertical sidebar, for use in marking newly-changed parts
.\"	of man pages.
.\"
.\" .VE
.\"	End of vertical sidebar.
.\"
.\" .DS
.\"	Begin an indented unfilled display.
.\"
.\" .DE
.\"	End of indented unfilled display.
.\"
'\"	# Heading for Tcl/Tk man pages
.de HS
.ds ^3 \\0
.if !"\\$3"" .ds ^3 \\$3
.if '\\$2'cmds'       .TH \\$1 1 \\*(^3 \\$4
.if '\\$2'lib'        .TH \\$1 3 \\*(^3 \\$4
.if '\\$2'tcldp'         .TH \\$1 n \\*(^3 Tcl-DP "Tcl-DP Commands"
.if '\\$2'tcldpc'         .TH \\$1 3 \\*(^3 Tcl-DP "Tcl-DP Library Procedures"
.if '\\$2'tcldpcmds'         .TH \\$1 1 \\*(^3 Tcl-DP "Tcl-DP Applications"
.if '\\$2'tcldpintro'         .TH \\$1 n \\*(^3 Tcl-DP "Introduction to Tcl-DP"
.if t .wh -1.3i ^B
.nr ^l \\n(.l
.ad b
..
'\"	# Start an argument description
.de AP
.ie !"\\$4"" .TP \\$4
.el \{\
.   ie !"\\$2"" .TP \\n()Cu
.   el          .TP 15
.\}
.ie !"\\$3"" \{\
.ta \\n()Au \\n()Bu
\&\\$1	\\fI\\$2\\fP	(\\$3)
.\".b
.\}
.el \{\
.br
.ie !"\\$2"" \{\
\&\\$1	\\fI\\$2\\fP
.\}
.el \{\
\&\\fI\\$1\\fP
.\}
.\}
..
'\"	# define tabbing values for .AP
.de AS
.nr )A 10n
.if !"\\$1"" .nr )A \\w'\\$1'u+3n
.nr )B \\n()Au+15n
.\"
.if !"\\$2"" .nr )B \\w'\\$2'u+\\n()Au+3n
.nr )C \\n()Bu+\\w'(in/out)'u+2n
..
'\"	# BS - start boxed text
'\"	# ^y = starting y location
'\"	# ^b = 1
.de BS
.br
.mk ^y
.nr ^b 1u
.if n .nf
.if n .ti 0
.if n \l'\\n(.lu\(ul'
.if n .fi
..
'\"	# BE - end boxed text (draw box now)
.de BE
.nf
.ti 0
.mk ^t
.ie n \l'\\n(^lu\(ul'
.el \{\
.\"	Draw four-sided box normally, but don't draw top of
.\"	box if the box started on an earlier page.
.ie !\\n(^b-1 \{\
\h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.el \}\
\h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\l'|0u-1.5n\(ul'
.\}
.\}
.fi
.br
.nr ^b 0
..
'\"	# VS - start vertical sidebar
'\"	# ^Y = starting y location
'\"	# ^v = 1 (for troff;  for nroff this doesn't matter)
.de VS
.mk ^Y
.ie n 'mc \s12\(br\s0
.el .nr ^v 1u
..
'\"	# VE - end of vertical sidebar
.de VE
.ie n 'mc
.el \{\
.ev 2
.nf
.ti 0
.mk ^t
\h'|\\n(^lu+3n'\L'|\\n(^Yu-1v\(bv'\v'\\n(^tu+1v-\\n(^Yu'\h'-|\\n(^lu+3n'
.sp -1
.fi
.ev
.\}
.nr ^v 0
..
'\"	# Special macro to handle page bottom:  finish off current
'\"	# box/sidebar if in box/sidebar mode, then invoked standard
'\"	# page bottom macro.
.de ^B
.ev 2
'ti 0
'nf
.mk ^t
.if \\n(^b \{\
.\"	Draw three-sided box if this is the box's first page,
.\"	draw two sides but no top otherwise.
.ie !\\n(^b-1 \h'-1.5n'\L'|\\n(^yu-1v'\l'\\n(^lu+3n\(ul'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.el \h'-1.5n'\L'|\\n(^yu-1v'\h'\\n(^lu+3n'\L'\\n(^tu+1v-\\n(^yu'\h'|0u'\c
.\}
.if \\n(^v \{\
.nr ^x \\n(^tu+1v-\\n(^Yu
\kx\h'-\\nxu'\h'|\\n(^lu+3n'\ky\L'-\\n(^xu'\v'\\n(^xu'\h'|0u'\c
.\}
.bp
'fi
.ev
.if \\n(^b \{\
.mk ^y
.nr ^b 2
.\}
.if \\n(^v \{\
.mk ^Y
.\}
..
'\"	# DS - begin display
.de DS
.RS
.nf
.sp
..
'\"	# DE - end display
.de DE
.fi
.RE
.sp .5
..
.HS dpwish cmds 3.2
.BS
.SH NAME
dpwish \- Distributed programming/windowing shell
.sp
dptcl \- Distributed programming shell
.sp
dpsh \- Distributed programming shell
.SH SYNOPSIS
\fBdpwish\fR ?\fIoptions\fR? ?\fIarg arg ...\fR?
.br
\fBdptcl\fR ?\fIoptions\fR? ?\fIarg arg ...\fR?
.br
\fBdpsh\fR ?\fIoptions\fR? ?\fIarg arg ...\fR?
.SH OPTIONS
.IP "\fB\-display \fIdisplay\fR" 15
Display (and screen) on which to display window.  Only allowed in \fBdpwish\fR.
Ignored if \fB-notk\fP is specified.
.IP "\fB\-file \fIfileName\fR" 15
Read commands from \fIfileName\fR rather than standard input.  The
last element in \fIfileName\fR will be used as the title for the
application and name of its interpreter for \fBsend\fR
commands (unless overridden by the \fB\-name\fR option\fR).
.IP "\fB\-geometry \fIgeometry\fR" 15
Initial geometry to use for window.  Only allowed in \fBdpwish\fR.
Ignored if \fB-notk\fP is specified.
.IP "\fB\-name \fIname\fR" 15
Use \fIname\fR as the title to be displayed in the window, and
as the name of the interpreter for \fBsend\fR commands.  Only allowed in
\fBdpwish\fR.  Ignored if \fB-notk\fP is specified.
.IP "\fB\-sync\fR" 15
Execute all X server commands synchronously, so that errors
are reported immediately.  This will result in much slower
execution, but it is useful for debugging.  Only allowed in \fBdpwish\fR.
Ignored if \fB-notk\fP is specified.
.IP "\fB\-help\fR" 15
Print a summary of the command-line options and exit.
.IP "\fB\-notk\fR" 15
Do not connect to the X server.  This mode is useful for
daemon/server processes.  Ignored in dptcl and dpsh.

.BE

.SH DESCRIPTION
.PP
\fBDpwish\fR is a simple program consisting of the Tcl command
language, the Tk toolkit, the Tcl-DP extension, and a main program
that reads commands from standard input or from a file.
It creates a main window and then processes Tcl commands.
If \fBdpwish\fR is invoked with no \fB\-f\fR option then it
reads Tcl commands interactively from standard input.
It will continue processing commands until all windows have been
deleted or until end-of-file is reached on standard input.
.PP
If the \fBdpwish\fP executable is named \fBdptcl\fP, then the \fI-notk\fP
flag is implied.  Finally, \fBdpsh\fP is a version of \fBdpwish\fR that
contains only th Tcl command language, the Tcl-DP extension, and a main
program that reads commands from standard input or from a file.
.VS
If there exists a file \fB.dpwishrc\fR in the home directory of
the user, \fBdpwish\fR (and \fBdptcl\fP) will evaluate the file
as a Tcl script just before reading the first command from standard
input.
The corresponding file for \fBdpsh\fP is \fB.dpshrc\fR
.VE
.PP
If the \fB\-file\fR option is provided to Tk, then \fBdpwish\fR (or
\fBdptcl\fP or \fBdpsh\fP) reads Tcl
commands from the file named in the \fB\-file\fR option.  These
commands will normally create an interactive interface consisting
of one or more widgets.  When the end of the command file is
reached, \fBdpwish\fR will continue to respond to X events until
all windows have been deleted.
.VS
There is no automatic evaluation of \fB.dpwishrc\fR in this
case, but the script file can always \fBsource\fR it if desired.
.VE

.SH "VARIABLES"
.PP
\fBDpwish\fR, \fBdptcl\fP, and \fBdpsh\fP set the following Tcl variables:
.TP 15
\fBargc\fR
Contains a count of the number of \fIarg\fR arguments (0 if none),
not including the options described above.
.TP 15
\fBargv\fR
Contains a Tcl list whose elements are the \fIarg\fR arguments (not
including the options described above), in order, or an empty string
if there are no \fIarg\fR arguments.
.TP 15
\fBargv0\fR
.VS
Contains \fIfileName\fR if it was specified.
Otherwise, contains the name by which \fBdpwish\fR was invoked.
.TP 15
\fBtcl_interactive\fR
Contains 1 if \fBdpwish\fR is reading commands interactively (no
\fB\-file\fR option was specified and standard input is a terminal-like
device), 0 otherwise.
.VE

.SH "SCRIPT FILES"
.PP
If you create a Tcl script in a file whose first line is
.DS
\fB#!/usr/local/bin/dpwish -f

.DE
then you can invoke the script file directly from your shell if
you mark it as executable.
.PP
If you create a Tcl script in a file whose first line is
.DS
\fB#!/usr/local/bin/dptcl -f

.DE
then you can invoke the script file directly from your shell if
you mark it as executable.  This form implies the -notk option.
The same technique can be used for \fBdpsh\fR.

The example above assume that \fBdpwish\fR and \fBdptcl\fP have been
installed in the default location in /usr/local/bin;  if they are
installed somewhere else then you'll have to modify the above line to
match.

.SH PROMPTS
.PP
.VS
When any of the programs are invoked interactively they
normally prompt for each
command with ``\fB% \fR''.  You can change the prompt by setting the
variables \fBtcl_prompt1\fR and \fBtcl_prompt2\fR.  If variable
\fBtcl_prompt1\fR exists then it must consist of a Tcl script
to output a prompt;  instead of outputting a prompt \fBdpwish\fR
will evaluate the script in \fBtcl_prompt1\fR.
The variable \fBtcl_prompt2\fR is used in a similar way when
a newline is typed but the current command isn't yet complete;
if \fBtcl_prompt2\fR isn't set then no prompt is output for
incomplete commands.
.VE

.SH KEYWORDS
shell, toolkit, Tcl-DP
