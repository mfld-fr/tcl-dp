%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 5.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 5.0, for use with Frame 5.0 products
% This ps_prolog file is Copyright (c) 1986-1995 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameMaker/SGML and FrameViewer as long as this 
% copyright notice is preserved.
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (5.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(Adobe's PostScript Language Reference Manual, 2nd Edition, section H.2.4)
	(says your EPS file is not valid, as it calls X              )
	dup dup (X) search pop exch pop exch pop length 
	5 -1 roll 
	putinterval 
	FMFAILURE
	} def
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
] { 0 def } forall
/FmBD {bind def} bind def
systemdict /pdfmark known {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge {
	
		
		/FmPD2 /pdfmark load def
		
		
		
		
		
		/FmPA { mark exch /Dest exch 5 3 roll 
				/View [ /XYZ null 6 -2 roll FmDC exch pop null] /DEST FmPD 
		}FmBD
	} {
		
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix itransform cvi exch cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix defaultmatrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add div fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(5.0) FMVERSION
1 1 0 0 612 792 0 1 14 FMDOCUMENT
0 0 /Courier FMFONTDEFINE
1 0 /Times-Roman FMFONTDEFINE
2 0 /Times-Bold FMFONTDEFINE
3 0 /Times-Italic FMFONTDEFINE
4 0 /Helvetica-Oblique FMFONTDEFINE
5 0 /Courier-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "34" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(A% dp_address info $a) 108 713.33 T
(128.84.154.8 0 {alvin.cs.cornell.edu fw.cs.cornell.edu alvin.cs alvin) 108 701.33 T
(fw.cs fw}) 108 689.33 T
1 12 Q
0.19 (The return value shows that the IP address of) 72 662 P
0 F
0.45 (fw.cs.cornell.edu) 293.31 662 P
1 F
0.19 ( is) 415.71 662 P
0 F
0.45 (128.84.154.8) 430.08 662 P
1 F
0.19 (, and) 516.48 662 P
9.17 (that it is known by a variety of names, including) 72 648 P
0 F
22.02 (alvin) 398.72 648 P
1 F
9.17 (,) 434.72 648 P
0 F
22.02 (alvin.cs) 449.9 648 P
1 F
9.17 (, and) 507.5 648 P
0 F
4.43 (fw.cs.cornell.edu) 72 634 P
1 F
1.85 (. The) 194.4 634 P
0 F
4.43 (dp_address) 225.76 634 P
1 F
1.85 ( command can be used to create a function that) 297.76 634 P
(returns the IP address given a host\325s name, or vice versa, as shown in the two functions below.) 72 620 T
0 10 Q
(A% proc InetAddress {hostname} {) 108 595.33 T
(set addr [dp_address create $hostname 0]) 126 583.33 T
(set x [dp_address info $addr]) 126 571.33 T
(dp_address delete $addr) 126 559.33 T
(lindex $x 0) 126 547.33 T
(}) 108 535.33 T
(A% proc Hostname {inetAddr} {) 108 511.33 T
(set addr [dp_address create $inetAddr 0]) 126 499.33 T
(set x [dp_address info $addr]) 126 487.33 T
(dp_address delete $addr) 126 475.33 T
(lindex [lindex $x 2] 0) 126 463.33 T
(}) 108 451.33 T
(A% InetAddress alvin.cs.cornell.edu) 108 439.33 T
(128.84.154.8) 108 427.33 T
(A% Hostname 128.84.154.8) 108 415.33 T
(alvin.cs.cornell.edu) 108 403.33 T
1 12 Q
0.09 (By the way, as shown in the next to last line of each of the procedures above, you should execute) 72 376 P
-0.56 (the) 72 362 P
0 F
-1.34 (dp_address) 89.11 362 P
-1.34 (delete) 163.55 362 P
1 F
-0.56 ( command to free up the memory associated with an address when you) 206.75 362 P
(are finished with it.) 72 348 T
2 18 Q
(Lear) 72 312 T
(ning Mor) 108.72 312 T
(e) 180.9 312 T
1 12 Q
0.16 (That concludes our tour of the Tcl-DP extension to Tcl/Tk. There are a few other features in Tcl-) 72 281 P
-0.13 (DP that we haven\325t discussed, but we have covered the main ones here. We hope you have gained) 72 267 P
0 (an appreciation for how simple it is to build distributed programs using Tcl-DP and that you have) 72 253 P
2.16 (enough background now to explore on your own. To learn more, study the examples in the) 72 239 P
0 F
-0.32 (examples) 72 225 P
1 F
-0.13 ( subdirectory, post articles to the) 129.6 225 P
0 F
-0.32 (comp.lang.tcl) 288.44 225 P
1 F
-0.13 ( newsgroup, and read the manual) 382.04 225 P
(pages in the) 72 211 T
0 F
(doc) 132.32 211 T
1 F
( subdirectory.) 153.92 211 T
-0.25 (Tcl-DP is the result of the efforts of many, many people. Some of the major contributors are Steve) 72 183 P
0.44 (Yen, Pekka Nikander, Tim MacKenzie, Lou Salkind, R. Lindsay Todd, Peter Liu, Ulla Bartsich,) 72 169 P
-0.31 (Mike Grafton, Jon Knight, Gordon Chaffee. You can help, too. If you add a new feature to Tcl-DP) 72 155 P
0.99 (or port it to a new platform, please send mail to) 72 141 P
0 F
2.38 (tcl-dp@cs.cornell.edu) 313.52 141 P
1 F
0.99 ( so that we can) 464.73 141 P
(incorporate the changes into the source.) 72 127 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "34" 1
%%Page: "33" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
0 X
0 0 0 1 0 0 0 K
(can be set using) 72 712 T
0 F
(dp_socketOption) 151.32 712 T
1 F
(:) 259.32 712 T
(\245) 90 684 T
2 F
-0.08 (Loop Back) 108 684 P
1 F
-0.08 (: When a message is sent to a group address, the sender also recei) 163.6 684 P
-0.08 (v) 476.89 684 P
-0.08 (es a cop) 482.7 684 P
-0.08 (y of) 521.08 684 P
1.48 (the message. This property) 108 670 P
1.48 (, called) 240.98 670 P
3 F
1.48 (loopbac) 281.61 670 P
1.48 (k) 320.03 670 P
1 F
1.48 (, can be toggled by setting the) 325.36 670 P
0 F
3.56 (loopBack) 482.4 670 P
1 F
-0.04 (property of the sock) 108 656 P
-0.04 (et using) 204.06 656 P
0 F
-0.1 (dp_socketOption) 244.65 656 P
1 F
-0.04 (.) 352.65 656 P
0 F
-0.1 (LoopBack) 358.61 656 P
1 F
-0.04 ( is a boolean v) 416.2 656 P
-0.04 (alued prop-) 485.06 656 P
(erty \050) 108 642 T
0 F
(yes) 133.66 642 T
1 F
( or) 155.26 642 T
0 F
(no) 171.25 642 T
1 F
(\051.) 185.65 642 T
(\245) 90 614 T
2 F
-0.19 (T) 108 614 P
-0.19 (ime to Li) 115.79 614 P
-0.19 (v) 161.28 614 P
-0.19 (e \050TTL\051) 167.16 614 P
1 F
-0.19 (: When an IP-multicast message is sent, one of the \336elds in the pack) 207.3 614 P
-0.19 (et) 531.34 614 P
0.24 (is called the time-to-li) 108 600 P
0.24 (v) 214.09 600 P
0.24 (e, or ttl, \336eld. When the pack) 219.91 600 P
0.24 (et is routed through a g) 360.9 600 P
0.24 (ate) 473.05 600 P
0.24 (w) 486.75 600 P
0.24 (ay) 495.29 600 P
0.24 (, the ttl) 505.84 600 P
0.11 (\336eld is decremented. If the ttl \336eld is e) 108 586 P
0.11 (v) 293.54 586 P
0.11 (er zero, the g) 299.36 586 P
0.11 (ate) 362.26 586 P
0.11 (w) 375.95 586 P
0.11 (ay drops the pack) 384.5 586 P
0.11 (et. The ttl \336eld) 469.01 586 P
-0.2 (thus limits the lifetime of a pack) 108 572 P
-0.2 (et, pre) 262.01 572 P
-0.2 (v) 291.49 572 P
-0.2 (enting pack) 297.31 572 P
-0.2 (ets from fore) 352.65 572 P
-0.2 (v) 413.93 572 P
-0.2 (er w) 419.75 572 P
-0.2 (andering through the) 440.42 572 P
(netw) 108 558 T
(ork.) 131.21 558 T
-0.02 (The def) 108 530 P
-0.02 (ault v) 144.85 530 P
-0.02 (alue for) 171.53 530 P
0 F
-0.04 (ttl) 211.48 530 P
1 F
-0.02 ( is speci\336ed when the sock) 233.08 530 P
-0.02 (et is created and can be changed later) 361.19 530 P
-0.07 (by setting the ttl property on the sock) 108 516 P
-0.07 (et. F) 286.35 516 P
-0.07 (or e) 307.43 516 P
-0.07 (xample, the follo) 325.5 516 P
-0.07 (wing fragment sets the) 406.71 516 P
0 F
-0.18 (ttl) 518.4 516 P
1 F
(of sock) 108 502 T
(et to 128:) 142.87 502 T
0 10 Q
(dp_socketOption $socket ttl 128) 108 477.33 T
1 12 Q
0.81 (The) 108 450 P
0 F
1.95 (ttl) 130.47 450 P
1 F
0.81 ( property can be used to limit the range of a multicast. F) 152.07 450 P
0.81 (or e) 430.61 450 P
0.81 (xample, to send to) 449.57 450 P
-0.24 (only hosts on you local area netw) 108 436 P
-0.24 (ork, use a) 267.11 436 P
0 F
-0.57 (ttl) 315.72 436 P
1 F
-0.24 ( v) 337.32 436 P
-0.24 (alue of 0. T) 345.78 436 P
-0.24 (o reach all hosts within 2 net-) 399.43 436 P
(w) 108 422 T
(ork hops, set) 116.54 422 T
0 F
(ttl) 180.54 422 T
1 F
( to 2.) 202.14 422 T
(\245) 90 394 T
2 F
0.47 (Adding and Dr) 108 394 P
0.47 (opping Membership) 186.07 394 P
1 F
0.47 (: A single IP-multicast sock) 290.22 394 P
0.47 (et can belong to se) 425.3 394 P
0.47 (v) 516.19 394 P
0.47 (eral) 522.01 394 P
0.54 (groups at once. When an IP-multicast sock) 108 380 P
0.54 (et is created, an initial group and port number) 316.74 380 P
3.46 (are speci\336ed. Y) 108 366 P
3.46 (ou can join other groups by calling) 188.57 366 P
0 F
8.3 (dp_socketOption) 383.09 366 P
1 F
3.46 ( with the) 491.08 366 P
0 F
3.08 (addMbr) 108 352 P
1 F
1.28 ( command. F) 151.2 352 P
1.28 (or e) 216.58 352 P
1.28 (xample, the follo) 236.01 352 P
1.28 (wing three lines of code create a sock) 319.93 352 P
1.28 (et that) 509.05 352 P
(belongs to three groups) 108 338 T
0 10 Q
(set socket [lindex [dp_connect -mudp 225.28.199.17 2120 16] 0]) 108 313.33 T
(dp_socketOption $socket addMbr 224.2.12.187) 108 301.33 T
(dp_socketOption $socket addMbr 235.102.89.5) 108 289.33 T
1 12 Q
0.76 (The same port number is used for all three addresses. Y) 108 262 P
0.76 (ou can use) 381.2 262 P
0 F
1.82 (dropMbr) 437.12 262 P
1 F
0.76 ( to remo) 487.52 262 P
0.76 (v) 528.85 262 P
0.76 (e) 534.67 262 P
(yourself from a group) 108 248 T
0 10 Q
(dp_socketOption $socket dropMbr 235.102.89.5) 108 223.33 T
194.7 196.8 72 196.8 2 L
V
0.6 H
0 Z
N
4 12 Q
(The Domain Name Ser) 72 198 T
216.4 196.8 195.06 196.8 2 L
V
N
(vice) 195.06 198 T
1 F
0.83 (One use of the) 72 170 P
0 F
1.99 (dp_address) 147.96 170 P
1 F
0.83 ( command is to specify the source or destination of addresses for) 219.96 170 P
1.17 (UDP and IP-multicast sockets. Another use is to find out information about hosts and services) 72 156 P
-0.51 (using the) 72 142 P
0 F
-1.22 (dp_address) 117.65 142 P
-1.22 (info) 192.15 142 P
1 F
-0.51 ( command. For example, suppose you create the following address:) 220.95 142 P
0 10 Q
(A% set a [dp_address create fw.cs.cornell.edu 0]) 108 117.33 T
(addr1) 108 105.33 T
1 12 Q
(You can find information about that address using the) 72 78 T
0 F
(dp_address info) 333.64 78 T
1 F
( command:) 441.64 78 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "33" 2
%%Page: "32" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
0.26 (load) 72 712 P
1 F
0.11 (, which contains the load average of each machine in the pool. The multicast group address) 100.8 712 P
(and port number, 225.28.199.17 and 2120, respectively, were chosen arbitrarily.) 72 698 T
-0.23 (Given this structure, you can find the most lightly loaded machine by searching through the) 72 670 P
0 F
-0.55 (load) 511.2 670 P
1 F
-0.14 (array. Alternatively, you could use Tk to build an interface that graphically displayed the contents) 72 656 P
(of this array.) 72 642 T
0.19 (Note that, in the example above, each machine also receives load average reports from itself. For) 72 614 P
0.31 (some applications this behavior, which is called) 72 600 P
3 F
0.31 (loopback) 306.84 600 P
1 F
0.31 (, may be undesirable. Loopback can be) 350.83 600 P
(turned off using the) 72 586 T
0 F
(loopBack) 169.32 586 T
1 F
( socket option.) 226.92 586 T
-0.03 (IP-multicast sockets and UDP sockets can be used to send data to each other. That is, you can use) 72 558 P
0.23 (a UDP socket to send to a multicast address, and a multicast socket to send to a UDP socket. For) 72 544 P
0.32 (example, the following code uses a UDP socket to report the load average to the multicast group) 72 530 P
(\050assuming the procedure) 72 516 T
0 F
(SendReport) 192.97 516 T
1 F
( is defined as above\051.) 264.97 516 T
0 10 Q
(set udp [lindex [dp_connect -udp 0] 0]) 108 491.33 T
(set address [dp_address create 225.28.199.17 2120]) 108 479.33 T
(SendReport $udp $address) 108 467.33 T
97.33 440.8 72 440.8 2 L
V
0.6 H
0 Z
N
4 12 Q
(IP-m) 72 442 T
158.57 440.8 97.21 440.8 2 L
V
N
(ulticast Soc) 97.21 442 T
164.33 440.8 158.33 440.8 2 L
V
N
(k) 158.33 442 T
216.12 440.8 164.09 440.8 2 L
V
N
(et options) 164.09 442 T
1 F
0.6 (IP-multicast sockets have the same socket options as UDP socket, and four other properties that) 72 414 P
72 72 540 720 C
72 72 540 402 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 81 540 387 R
7 X
0 0 0 1 0 0 0 K
V
0 10 Q
0 X
(proc GetLoad {} {) 108 380.33 T
(set info [split [exec uptime] ,]) 126 368.33 T
(lindex [lindex $info 3] 2) 126 356.33 T
(}) 108 344.33 T
(proc SendReport {socket address} {) 108 320.33 T
(set msg \322[dp_hostname] [GetLoad]\323) 126 308.33 T
(dp_sendTo $socket $msg $address) 126 296.33 T
(dp_after 1000 SendReport $socket $address) 126 284.33 T
(}) 108 272.33 T
(proc RecvReport {mode socket} {) 108 248.33 T
(global load) 126 236.33 T
(set info [dp_receiveFrom $socket]) 126 224.33 T
(set x [lindex $info 1]) 126 212.33 T
(set hostName [lindex $x 0]) 126 200.33 T
(set hostLoad [lindex $x 1]) 126 188.33 T
(set load\050$hostName\051 $hostLoad) 126 176.33 T
(}) 108 164.33 T
(set socket [lindex [dp_connect -mudp 225.28.199.17 2120 16] 0]) 108 140.33 T
(set address [dp_address create 225.28.199.17 2120]) 108 128.33 T
(dp_filehandler $socket r RecvReport) 108 116.33 T
(SendReport $socket $address) 108 104.33 T
1 12 Q
(Figure 13: A load monitor using IP-multicast) 197.66 84 T
73.5 396 538.5 396 2 L
1 H
2 Z
N
72 72 540 720 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "32" 3
%%Page: "31" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(B% dp_socketOption $udpB sendBuffer) 108 713.33 T
(9000) 108 701.33 T
(B% dp_sendTo $udpB [format %12000d 10] $dest) 108 689.33 T
(error writing file3: Message too long) 108 677.33 T
(B% dp_socketOption $udpB sendBuffer 15000) 108 665.33 T
(15000) 108 653.33 T
(B% dp_sendTo $udpB [format %12000d 10] $dest) 108 641.33 T
(B%) 108 629.33 T
1 12 Q
(If the recei) 108 602 T
(v) 159.67 602 T
(e b) 165.49 602 T
(uf) 179.58 602 T
(fer is too small, the message will be dropped silently) 189.28 602 T
(.) 441.14 602 T
-0.3 (As with TCP sock) 108 574 P
-0.3 (ets, each system imposes certain restrictions on the maximum size of the) 194.66 574 P
(b) 108 560 T
(uf) 113.76 560 T
(fers.) 123.46 560 T
(\245) 90 532 T
2 F
0.95 (Blocking Beha) 108 532 P
0.95 (vior) 183.01 532 P
1 F
0.95 (: D) 203.67 532 P
0 F
2.29 (p_receiveFrom) 219.62 532 P
1 F
0.95 ( normally blocks if there is no data w) 313.22 532 P
0.95 (aiting to) 499.38 532 P
1.02 (be read. This beha) 108 518 P
1.02 (vior can be changed by using the) 198.79 518 P
0 F
2.45 (noblock) 366.91 518 P
1 F
1.02 ( property) 417.31 518 P
1.02 (.) 461.2 518 P
0 F
2.45 (Noblock) 468.23 518 P
1 F
1.02 ( is a) 518.63 518 P
(boolean v) 108 504 T
(alued property \050) 154.69 504 T
0 F
(yes) 231.34 504 T
1 F
( or) 252.94 504 T
0 F
(no) 268.93 504 T
1 F
(\051.) 283.33 504 T
0 F
(Dp_sendto) 293.33 504 T
1 F
( ne) 358.13 504 T
(v) 372.16 504 T
(er blocks.) 377.98 504 T
97.33 476.8 72 476.8 2 L
V
0.6 H
0 Z
N
4 F
(IP-m) 72 478 T
134.56 476.8 97.21 476.8 2 L
V
N
(ulticast) 97.21 478 T
1 F
0.36 (IP-multicast sockets are similar to UDP sockets, in that they transmit whole messages unreliably) 72 450 P
0.81 (using) 72 436 P
0 F
1.94 (dp_sendTo) 101.81 436 P
1 F
0.81 (,) 166.61 436 P
0 F
1.94 (dp_receiveFrom) 173.42 436 P
1 F
0.81 (, and) 274.22 436 P
0 F
1.94 (dp_address) 302.17 436 P
1 F
0.81 (, but they have the advantage that) 374.17 436 P
(they can efficiently send data to several clients with one function call and a single address.) 72 422 T
0.65 (To use IP-multicast, you must first understand the concept of a) 72 394 P
3 F
0.65 (group address) 383.76 394 P
1 F
0.65 (. A group address) 453.41 394 P
0.69 (looks like an ordinary IP address, except the range is 224.0.0.1 to 239.255.255.255 and it is not) 72 380 P
0.05 (associated with a single machine, but with a group of machines. When a process sends a message) 72 366 P
0.23 (to a group address, all machines that have created a multicast socket with that group address will) 72 352 P
-0.44 (receive it) 72 338 P
1 9.6 Q
-0.35 (8) 115.88 342.8 P
1 12 Q
-0.44 (. A machine becomes part of a group by creating a socket by calling) 120.68 338 P
0 F
-1.06 (dp_connect) 444.1 338 P
1 F
-0.44 ( with) 516.1 338 P
0.55 (the) 72 324 P
0 F
1.33 (-mudp) 90.22 324 P
1 F
0.55 ( flag, passing in three additional parameters: the group address, the port number, and) 126.22 324 P
(the) 72 310 T
3 F
(time-to-live) 89.66 310 T
1 F
( \050ttl\051. We will explain the meaning of the ttl parameter shortly.) 144.98 310 T
0.95 (For example, suppose you have a pool of Unix machines on your network that can be used for) 72 282 P
-0.31 (general purpose computing. You decide to use Tcl-DP to build a load monitor that reports the load) 72 268 P
-0.13 (on each machine in the pool to every other machine in the pool once a second so that you can find) 72 254 P
-0.1 (an unloaded machine. The code in figure 13 shows an implementation of this service that uses IP-) 72 240 P
2.46 (multicast to send the load average of each machine to every other machine. The procedure) 72 226 P
0 F
-0.9 (GetLoad) 72 212 P
1 F
-0.38 ( returns the load average on each machine, obtained from parsing the results of the Unix) 122.4 212 P
0 F
0.34 (uptime) 72 198 P
1 F
0.14 ( command. The procedure) 115.2 198 P
0 F
0.34 (SendReport) 244.72 198 P
1 F
0.14 ( sends a message containing the hostname and) 316.72 198 P
0.11 (load average on the local machine to every machine in the group, and then schedules another call) 72 184 P
-0.24 (to) 72 170 P
0 F
-0.58 (SendReport) 84.09 170 P
1 F
-0.24 ( using the) 156.09 170 P
0 F
-0.58 (dp_after) 205.03 170 P
1 F
-0.24 ( command, which is equivalent to Tk\325s) 262.63 170 P
0 F
-0.58 (after) 450.92 170 P
1 F
-0.24 ( command.) 486.92 170 P
0 F
12.16 (SendReport) 72 156 P
1 F
5.07 ( takes two parameters, an IP-multicast socket and a group address. The) 144 156 P
0 F
-1.63 (ReceiveReport) 72 142 P
1 F
-0.68 ( procedure is called by a file handler whenever the IP-multicast socket becomes) 165.6 142 P
1.99 (readable \050i.e., when a report has been received\051.) 72 128 P
0 F
4.77 (ReceiveReport) 320.48 128 P
1 F
1.99 ( updates the global array) 414.08 128 P
72 96 540 111 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 109 225 109 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(8.) 90 89.33 T
-0.14 (Unless, of course, the message is lost in the netw) 102 89.33 P
-0.14 (ork. In this case, only some of the machines will recei) 296.46 89.33 P
-0.14 (v) 510.35 89.33 P
-0.14 (e) 515.2 89.33 P
(the message.) 102 77.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "31" 4
%%Page: "30" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
0 X
0 0 0 1 0 0 0 K
(The last parameter is created using the) 72 712 T
0 F
(dp_address) 259.62 712 T
1 F
( command.) 331.62 712 T
0 F
-0.17 (Dp_address) 72 684 P
1 F
-0.07 ( creates, deletes, and queries) 144 684 P
3 F
-0.07 (addresses) 283.27 684 P
1 F
-0.07 (. To create an address, you must specify the) 330.6 684 P
6.44 (host address and a port number. For example, assuming process A is running on) 72 670 P
0 F
-0.13 (mayo.sandwich.com) 72 656 P
1 F
-0.06 (, the following command creates an address for the socket on port 2020:) 194.4 656 P
0 10 Q
(B% set dest [dp_address create mayo.sandwich.com 2020]) 108 631.33 T
(addr0) 108 619.33 T
1 12 Q
-0.05 (The return value of) 72 592 P
0 F
-0.11 (dp_address create) 167.11 592 P
1 F
-0.05 ( can then be used as a parameter to) 289.4 592 P
0 F
-0.11 (dp_sendTo) 459.25 592 P
1 F
-0.05 (, as) 524.05 592 P
(shown below:) 72 578 T
0 10 Q
(B% dp_sendTo $udpB \322Hello there\323 $dest) 108 553.33 T
1 12 Q
(Process A can read the message using) 72 526 T
0 F
(dp_receiveFrom) 256.96 526 T
1 F
(:) 357.76 526 T
0 10 Q
(A% set x [dp_receiveFrom $udpA]) 108 501.33 T
(addr0 {Hello there}) 108 489.33 T
0 12 Q
2.94 (Dp_receiveFrom) 72 462 P
1 F
1.23 ( returns a list of two values. The first is the address of the sender and the) 172.8 462 P
(second is the message. The address can be used for replies:) 72 448 T
0 10 Q
(A% dp_sendTo $udpA \322Pleased to meet you\323 [lindex $x 0]) 108 423.33 T
1 12 Q
-0.37 (An important feature of UDP sockets is that they are) 72 396 P
3 F
-0.37 (connectionless) 323.6 396 P
1 F
-0.37 (. That is, a pair of TCP sockets) 394.26 396 P
-0.3 (is needed for each pair of processes that communicate. The two sockets are) 72 382 P
3 F
-0.3 (connected) 431.97 382 P
1 F
-0.3 (. In contrast,) 480.62 382 P
0.76 (a single UDP socket can be used to communicate with an unlimited number of other processes,) 72 368 P
1.54 (since the destination address is specified in the message. Since many operating systems place) 72 354 P
1.49 (rather stringent limits on the number of open sockets in a process, but almost no limit on the) 72 340 P
-0.25 (number of addresses that can be created, UDP sockets are useful in applications that communicate) 72 326 P
(with many other processes.) 72 312 T
4.7 (The standard functions) 72 284 P
0 F
11.28 (close) 199.08 284 P
1 F
4.7 (,) 235.08 284 P
0 F
11.28 (dp_atclose) 245.77 284 P
1 F
4.7 (,) 317.77 284 P
0 F
11.28 (dp_isready) 328.47 284 P
1 F
4.7 (,) 400.47 284 P
0 F
11.28 (dp_filehandler) 411.17 284 P
1 F
4.7 (, and) 511.97 284 P
0 F
-1.08 (dp_socketOption) 72 270 P
1 F
-0.45 ( can be used with UDP sockets. The following properties can be set on UDP) 180 270 P
(sockets using) 72 256 T
0 F
(dp_socketOption) 139.33 256 T
1 F
(:) 247.33 256 T
(\245) 90 228 T
2 F
0.29 (Buffer Sizes) 108 228 P
1 F
0.29 (: Setting the b) 169.94 228 P
0.29 (uf) 237.57 228 P
0.29 (fer size of a UDP sock) 247.26 228 P
0.29 (ets determines the maximum message) 356.88 228 P
-0.12 (size. F) 108 214 P
-0.12 (or e) 139.04 214 P
-0.12 (xample, if the send or recei) 157.06 214 P
-0.12 (v) 286.81 214 P
-0.12 (e b) 292.63 214 P
-0.12 (uf) 306.61 214 P
-0.12 (fer is 8 KBytes and you try to send a 12 KByte) 316.3 214 P
(message, the message will not get through and you will get an error message:) 108 200 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "30" 5
%%Page: "29" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
97.33 476.8 72 476.8 2 L
0 X
0 0 0 1 0 0 0 K
V
0.6 H
0 Z
N
4 12 Q
(UDP) 72 478 T
1 F
1.49 (TCP sockets provide reliable, in-order data delivery with a stream interface. In contrast, UDP) 72 450 P
-0.35 (sockets provide no guarantees on whether data will get through but preserves message boundaries.) 72 436 P
-0.37 (That is, when a message is sent by one application to another using UDP, either the entire message) 72 422 P
1.09 (will get through and the receiver will receive it in as a single unit, or the message will not get) 72 408 P
-0.52 (through at all. There is a chance that a message may be duplicated using UDP, but such duplication) 72 394 P
(is rare.) 72 380 T
-0.65 (To create a UDP socket using Tcl-DP, you call) 72 352 P
0 F
-1.56 (dp_connect) 294.77 352 P
1 F
-0.65 ( with the) 366.77 352 P
0 F
-1.56 (-udp) 409.82 352 P
1 F
-0.65 ( flag and port number) 438.62 352 P
0.07 (of the socket. For example, the following command creates a UDP socket with port number 2020) 72 338 P
(in process A:) 72 324 T
0 10 Q
(A% set info [dp_connect -udp 2020]) 108 299.33 T
(file3 2020) 108 287.33 T
(A% set udpA [lindex $info 0]) 108 275.33 T
(file3) 108 263.33 T
1 12 Q
1.44 (As with TCP sockets, an identifier for the socket \050) 72 236 P
0 F
3.46 (file3) 325.61 236 P
1 F
1.44 (\051 and the port number of the socket) 361.61 236 P
0.16 (\050) 72 222 P
0 F
0.39 (2020) 76 222 P
1 F
0.16 (\051 are returned. If you can pass in a port number of) 104.8 222 P
0 F
0.39 (0) 348.35 222 P
1 F
0.16 (, the system will chose \050and return\051 an) 355.55 222 P
(unused port number.) 72 208 T
(For the examples that follow, we will need another UDP socket in process B:) 72 180 T
0 10 Q
(B% set info [dp_connect -udp 4100]) 108 155.33 T
(file3 4100) 108 143.33 T
(B% set udpB [lindex $info 0]) 108 131.33 T
(file3) 108 119.33 T
1 12 Q
0.15 (You can use the) 72 92 P
0 F
0.36 (dp_sendTo) 152.59 92 P
1 F
0.15 ( command to send a message using UDP.) 217.39 92 P
0 F
0.36 (Dp_sendTo) 420.25 92 P
1 F
0.15 ( takes three) 485.05 92 P
0.55 (parameters: the socket identifier \050) 72 78 P
0 F
1.33 (file3) 235.51 78 P
1 F
0.55 (\051, the message \050\322) 271.51 78 P
0 F
1.33 (hello) 353.81 78 P
1 F
0.55 (\323\051, and the destination address.) 389.81 78 P
72 510 540 516 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(a.) 90 503.33 T
(The range v) 102 503.33 T
(aries from system to system, as does the def) 149.51 503.33 T
(ault. This is a typical v) 325.22 503.33 T
(alue.) 416.08 503.33 T
2 12 Q
(T) 117.56 712 T
(able 3: TCP Sock) 124.46 712 T
(et pr) 213.35 712 T
(operties set by the) 237.46 712 T
5 F
(dp_socketOption) 332.77 712 T
2 F
( command) 440.77 712 T
1 F
(property) 93.67 679 T
(le) 171.46 686 T
(g) 179.94 686 T
(al) 185.88 686 T
(v) 167.82 672 T
(alues) 173.52 672 T
(def) 220.4 679 T
(ault) 235.6 679 T
(Description) 374 679 T
0 F
(sendBuffer) 78 648 T
1 F
(1-64K) 165.54 648 T
1 9.6 Q
(a) 196.2 652.8 T
1 12 Q
(> 8192) 220.12 648 T
(Size of TCP send b) 270 648 T
(uf) 362.42 648 T
(fer) 372.12 648 T
0 F
(recvBuffer) 78 626 T
1 F
(1-64K) 167.67 626 T
(> 8192) 220.12 626 T
(Size of TCP recei) 270 626 T
(v) 354.68 626 T
(e b) 360.5 626 T
(uf) 374.59 626 T
(fer) 384.29 626 T
0 F
(noblock) 78 604 T
1 F
(yes, no) 166 604 T
(no) 231 604 T
(W) 270 604 T
(ill calls on the sock) 280.85 604 T
(et will block?) 373.39 604 T
0 F
(autoClose) 78 582 T
1 F
(yes, no) 166 582 T
(yes) 229 582 T
(W) 270 582 T
(ill the sock) 280.85 582 T
(et will automatically close and remo) 333.4 582 T
(v) 507.53 582 T
(e) 513.35 582 T
(\336le handlers if the connection is brok) 270 568 T
(en?) 448.52 568 T
0 F
(linger) 78 546 T
1 F
(>= 0) 171.73 546 T
(0) 234 546 T
(Blocking time on) 270 546 T
0 F
(close) 356.34 546 T
1 F
( to ensure data deli) 392.34 546 T
(v) 482.69 546 T
(ery) 488.51 546 T
(.) 503.05 546 T
0 F
(reuseAddr) 78 524 T
1 F
(yes, no) 166 524 T
(yes) 229 524 T
(Allo) 270 524 T
(w local address reuse?) 291.04 524 T
72 701.75 72 516.25 2 L
V
0.5 H
0 Z
N
156 702.25 156 515.75 2 L
V
N
210 702.25 210 515.75 2 L
V
N
264 702.25 264 515.75 2 L
V
N
540 701.75 540 516.25 2 L
V
N
71.75 702 540.25 702 2 L
V
N
72.25 663.25 539.75 663.25 2 L
V
N
72.25 660.75 539.75 660.75 2 L
V
N
71.75 640 540.25 640 2 L
V
N
71.75 618 540.25 618 2 L
V
N
71.75 596 540.25 596 2 L
V
N
71.75 560 540.25 560 2 L
V
N
71.75 538 540.25 538 2 L
V
N
71.75 516 540.25 516 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "29" 6
%%Page: "28" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(A% puts \322Send buffer size: [dp_socketOption $s1 sendBuffer]\323) 108 713.33 T
(Send buffer size: 8192) 108 701.33 T
(A% puts \322Receive buffer size: [dp_socketOption $s1 recvBuffer]\323) 108 689.33 T
(Receive buffer size: 8192) 108 677.33 T
(A% dp_socketOption $s1 sendBuffer 32768) 108 665.33 T
(32768) 108 653.33 T
(A% dp_socketOption $s1 recvBuffer 32768) 108 641.33 T
(32768) 108 629.33 T
1 12 Q
1.33 (Each operating system imposes certain restrictions on the maximum size of the b) 108 602 P
1.33 (uf) 512.32 602 P
1.33 (fers) 522.01 602 P
0.52 (\050it\325) 108 588 P
0.52 (s rarely greater than 64 Kbytes\051. In some cases, when and ho) 122 588 P
0.52 (w you can resize them is) 419.07 588 P
0.56 (also restricted. The best w) 108 574 P
0.56 (ay to \336gure it out for your personal con\336guration is by e) 235.75 574 P
0.56 (xperi-) 511.34 574 P
(mentation.) 108 560 T
(\245) 90 532 T
2 F
0.56 (Blocking Beha) 108 532 P
0.56 (vior) 182.61 532 P
1 F
0.56 (: By def) 203.27 532 P
0.56 (ault, calls that write data to a sock) 242.93 532 P
0.56 (et will block if there is not) 410.01 532 P
0.71 (enough room left in the send b) 108 518 P
0.71 (uf) 258.67 518 P
0.71 (fers, and calls that read data from a sock) 268.37 518 P
0.71 (et will block if) 467.54 518 P
0.96 (there is no data w) 108 504 P
0.96 (aiting to be read. These beha) 196.36 504 P
0.96 (viors can be changed by using the) 338.86 504 P
0 F
2.3 (nob-) 511.2 504 P
(lock) 108 490 T
1 F
( property) 136.8 490 T
(.) 179.68 490 T
0 F
(Noblock) 185.68 490 T
1 F
( is a boolean v) 236.08 490 T
(alued property \050) 305.1 490 T
0 F
(yes) 381.74 490 T
1 F
( or) 403.34 490 T
0 F
(no) 419.34 490 T
1 F
(\051.) 433.74 490 T
0.62 (The \336rst line belo) 108 462 P
0.62 (w queries the current v) 194.57 462 P
0.62 (alue of the) 306.73 462 P
0 F
1.5 (noblock) 362.25 462 P
1 F
0.62 ( property) 412.65 462 P
0.62 (. The second line) 456.15 462 P
(mak) 108 448 T
(es the sock) 128.54 448 T
(et non-blocking, so that subsequent calls to) 181.08 448 T
0 F
(dp_receive) 391.07 448 T
1 F
( do not block.) 463.07 448 T
0 10 Q
(A% dp_socketOption $s1 noblock) 108 423.33 T
(no) 108 411.33 T
(A% dp_socketOption $s1 noblock yes) 108 399.33 T
(A% dp_receive $s1) 108 387.33 T
1 12 Q
(\245) 90 360 T
2 F
3.02 (A) 108 360 P
3.02 (utomatic sock) 116.06 360 P
3.02 (et cleanup) 189.95 360 P
1 F
3.02 (: By def) 245.3 360 P
3.02 (ault,) 289.88 360 P
0 F
7.24 (dp_send) 316.89 360 P
1 F
3.02 ( and) 367.29 360 P
0 F
7.24 (dp_receive) 396.65 360 P
1 F
3.02 ( automatically) 468.65 360 P
0.4 (close a sock) 108 346 P
0.4 (et and remo) 166.67 346 P
0.4 (v) 223.94 346 P
0.4 (es its \336le handlers when the connection is brok) 229.76 346 P
0.4 (en. If an applica-) 457.49 346 P
0.3 (tion programmer w) 108 332 P
0.3 (ants to close the \336le manually) 201.13 332 P
0.3 (, this beha) 344.84 332 P
0.3 (vior can be suppressed by set-) 394.2 332 P
0.88 (ting the) 108 318 P
0 F
2.11 (autoClose) 149.09 318 P
1 F
0.88 ( property of the sock) 213.89 318 P
0.88 (et.) 316.6 318 P
0 F
2.11 (AutoClose) 332.14 318 P
1 F
0.88 ( is a boolean v) 396.94 318 P
0.88 (alued property) 469.47 318 P
(\050) 108 304 T
0 F
(yes) 112 304 T
1 F
( or) 133.6 304 T
0 F
(no) 149.59 304 T
1 F
(\051.) 163.99 304 T
(\245) 90 276 T
2 F
0.34 (Reusing P) 108 276 P
0.34 (ort Numbers) 159.77 276 P
1 F
0.34 (: When a process with an open sock) 225.77 276 P
0.34 (et crashes, the operating sys-) 400.33 276 P
2.13 (tem pre) 108 262 P
2.13 (v) 146.15 262 P
2.13 (ents other processes from opening a sock) 151.97 262 P
2.13 (et with the same port number until) 361.91 262 P
0.68 (enough time has passed that an) 108 248 P
0.68 (y old pack) 260.18 248 P
0.68 (ets \337oating around in the netw) 311.41 248 P
0.68 (ork that are des-) 460.33 248 P
1.49 (tined for the dead process ha) 108 234 P
1.49 (v) 252.85 234 P
1.49 (e e) 258.67 234 P
1.49 (xpired. If the boolean property) 273.63 234 P
0 F
3.58 (reuseAddr) 431.05 234 P
1 F
1.49 ( is set to) 495.85 234 P
0 F
(yes) 108 220 T
1 F
(, processes can reuse the port number in question immediately) 129.6 220 T
(.) 427.44 220 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "28" 7
%%Page: "27" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
0 X
0 0 0 1 0 0 0 K
(\245) 90 712 T
2 F
-0.3 (Buffer Sizes) 108 712 P
1 F
-0.3 (: When a process writes data to a sock) 169.36 712 P
-0.3 (et, the operating system copies that data) 350.14 712 P
-0.22 (into an internal b) 108 698 P
-0.22 (uf) 188.75 698 P
-0.22 (fer) 198.45 698 P
-0.22 (, called the) 211.29 698 P
3 F
-0.22 (send b) 265.94 698 P
-0.22 (uf) 296.48 698 P
-0.22 (fer) 305.6 698 P
1 F
-0.22 (, where it remains until its transfer is ackno) 318.45 698 P
-0.22 (wl-) 524 698 P
0.1 (edged by the recei) 108 684 P
0.1 (v) 195.63 684 P
0.1 (er) 201.45 684 P
0.1 (. As long as there is suf) 210.12 684 P
0.1 (\336cient free space in the send b) 322.74 684 P
0.1 (uf) 468.39 684 P
0.1 (fer) 478.08 684 P
0.1 (, calls lik) 490.92 684 P
0.1 (e) 534.67 684 P
0 F
1.6 (dp_send) 108 670 P
1 F
0.67 ( that write data to the sock) 158.4 670 P
0.67 (et will not block. Similarly) 288.94 670 P
0.67 (, the recei) 419.84 670 P
0.67 (v) 467.86 670 P
0.67 (er\325) 473.68 670 P
0.67 (s operating) 486.34 670 P
0.58 (systems has an internal b) 108 656 P
0.58 (uf) 230.09 656 P
0.58 (fer \050the) 239.78 656 P
3 F
0.58 (r) 278.93 656 P
0.58 (eceive b) 283.15 656 P
0.58 (uf) 322.48 656 P
0.58 (fer) 331.6 656 P
1 F
0.58 (\051 where it stores incoming data until the) 344.93 656 P
(client e) 108 642 T
(x) 142.81 642 T
(ecutes a call such as) 148.63 642 T
0 F
(dp_receive) 248.27 642 T
1 F
( to read it.) 320.27 642 T
1.31 (Y) 108 614 P
1.31 (ou can set or query the size of the send and recei) 115.34 614 P
1.31 (v) 362.37 614 P
1.31 (e b) 368.19 614 P
1.31 (uf) 383.59 614 P
1.31 (fers for each sock) 393.28 614 P
1.31 (et using the) 482.05 614 P
0 F
0.81 (sendBuffer) 108 600 P
1 F
0.34 ( and) 180 600 P
0 F
0.81 (recvBuffer) 204 600 P
1 F
0.34 ( properties. F) 276 600 P
0.34 (or e) 340.15 600 P
0.34 (xample, the follo) 358.63 600 P
0.34 (wing code prints out) 440.66 600 P
(the current size of the send and recei) 108 586 T
(v) 283.31 586 T
(e b) 289.13 586 T
(uf) 303.22 586 T
(fers and then sets them both to 32 KBytes) 312.91 586 T
72 72 540 720 C
72 72 540 549 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
75.06 -186.43 543.06 540 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(1) 75.06 534 T
(dp_MakeRPCServer 1905) 111.06 534 T
(2) 75.06 523 T
(proc SendFile {host port filename} {) 111.06 523 T
(3) 75.06 512 T
(set inFile [open $filename r]) 147.06 512 T
(4) 75.06 501 T
(set info [dp_connect $host $port]) 147.06 501 T
(5) 75.06 490 T
(set socket [lindex $info 0]) 147.06 490 T
(6) 75.06 479 T
(while {![eof $inFile]} {) 147.06 479 T
(7) 75.06 468 T
(set data [read $inFile 8192]) 183.06 468 T
(8) 75.06 457 T
(dp_send $socket $data nonewline) 183.06 457 T
(9) 75.06 446 T
(}) 147.06 446 T
(10) 75.06 435 T
(close $inFile) 147.06 435 T
(11) 75.06 424 T
(close $socket) 147.06 424 T
(12) 75.06 413 T
(}) 111.06 413 T
1 12 Q
(Figure 11: Serv) 193.09 393 T
(er code for Tcl-DP FTP e) 267.57 393 T
(xample) 389.7 393 T
0 9 Q
(1) 75.06 355 T
(proc Connect {serverHost} {) 111.06 355 T
(2) 75.06 344 T
(return [dp_MakeRPCClient $serverHost 1905]) 147.06 344 T
(3) 75.06 333 T
(}) 111.06 333 T
(4) 75.06 322 T
(5) 75.06 311 T
(proc GetFile {server remoteFilename localFilename} {) 111.06 311 T
(6) 75.06 300 T
(set outFile [open $localFilename w]) 147.06 300 T
(7) 75.06 289 T
(set cInfo [dp_connect -server 0]) 147.06 289 T
(8) 75.06 278 T
(set cSocket [lindex $cInfo 0]) 147.06 278 T
(9) 75.06 267 T
(set cPort [lindex $cInfo 1]) 147.06 267 T
(10) 75.06 256 T
(dp_RDO $server SendFile [dp_hostname] $cPort $remoteFilename) 147.06 256 T
(11) 75.06 245 T
(set dInfo [dp_accept $cSocket]) 147.06 245 T
(12) 75.06 234 T
(close $cSocket) 147.06 234 T
(13) 75.06 223 T
(set dSocket [lindex $dInfo 0]) 147.06 223 T
(14) 75.06 212 T
(while {1} {) 147.06 212 T
(15) 75.06 201 T
(if [catch {dp_receive $dSocket} data] {) 183.06 201 T
(16) 75.06 190 T
(break;) 219.06 190 T
(17) 75.06 179 T
(}) 183.06 179 T
(18) 75.06 168 T
(puts -nonewline $outFile $data) 183.06 168 T
(19) 75.06 157 T
(puts -nonewline \322#\323) 183.06 157 T
(20) 75.06 146 T
(flush stdout) 183.06 146 T
(21) 75.06 135 T
(}) 147.06 135 T
(22) 75.06 124 T
(puts \322\322) 147.06 124 T
(23) 75.06 113 T
(close $outFile) 147.06 113 T
(24) 75.06 102 T
(}) 111.06 102 T
1 12 Q
(Figure 12: Client code for Tcl-DP FTP e) 193.99 82 T
(xample) 388.8 82 T
75.06 72 540 540 C
75.06 377 540 389 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
76.56 383 541.56 383 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
75.06 72 540 540 C
72 72 540 549 C
73.5 546 538.5 546 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
72 72 540 720 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "27" 8
%%Page: "26" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
0 X
0 0 0 1 0 0 0 K
2.14 (The Tcl-DP code in figures 11 and 12 implement this protocol. The client uses) 72 320 P
0 F
5.15 (dp_RPC) 482.32 320 P
1 F
2.14 ( to) 525.52 320 P
(implement step 2 by calling the) 72 306 T
0 F
(SendFile) 226 306 T
1 F
( function in the server.) 283.6 306 T
120.01 278.8 72 278.8 2 L
V
0.6 H
0 Z
N
4 F
(TCP Soc) 72 280 T
125.77 278.8 119.77 278.8 2 L
V
N
(k) 119.77 280 T
177.56 278.8 125.53 278.8 2 L
V
N
(et options) 125.53 280 T
1 F
-0.11 (A socket has many parameters that affect its behavior. Tcl-DP sets these parameters to reasonable) 72 252 P
-0.59 (default values when the societe is created.) 72 238 P
3 F
-0.59 (Socket options) 272.45 238 P
1 F
-0.59 ( give you control over these options. They) 341.52 238 P
-0.17 (can be used to specify whether function calls block, how data is buffered, and the reliability of the) 72 224 P
-0.05 (connection. They are accessed using) 72 210 P
0 F
-0.12 (dp_socketOption) 249.69 210 P
1 F
-0.05 (, which takes two or three parameters,) 357.69 210 P
0.42 (similar to) 72 196 P
0 F
1.02 (configure) 121.52 196 P
1 F
0.42 ( requests on Tk widgets. The first parameter is the socket identifier \050e.g.,) 186.32 196 P
0 F
3.16 (file4) 72 182 P
1 F
1.32 (\051, the second is a) 108 182 P
3 F
1.32 (property) 197.9 182 P
1 F
1.32 ( of the socket you want to examine or modify, and the third) 239.23 182 P
0.3 (parameter, if present, is the new value for the property. If the third parameter is not supplied, the) 72 168 P
0.27 (current value of the property is returned. The paragraphs below discuss the properties relevant to) 72 154 P
(TCP sockets, which are summarized in table 3.) 72 140 T
72 96 540 111 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 109 225 109 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(7.) 90 89.33 T
-0.08 (Of course, the connection could be lost for other reasons, such as the serv) 102 89.33 P
-0.08 (er crashing. A better implemen-) 394.86 89.33 P
(tation of the client and serv) 102 77.33 T
(er w) 211 77.33 T
(ould handle this case b) 228.39 77.33 T
(ut complicate the e) 319.29 77.33 T
(xample.) 394.96 77.33 T
72.5 342 539.5 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
80.01 373.44 162.16 436.49 R
3 X
0 0 0 1 0 0 0 K
V
73.34 379.55 155.48 442.6 R
7 X
V
0.5 H
0 Z
0 X
N
7 X
90 450 26.27 17.16 115.18 408.15 G
0 X
90 450 26.27 17.16 115.18 408.15 A
1 12 Q
(server) 100.52 404.36 T
(A) 111.71 429.08 T
212.51 374.44 294.66 437.49 R
3 X
V
205.84 380.55 287.98 443.6 R
7 X
V
0 X
N
7 X
90 450 26.27 17.16 247.68 409.15 G
0 X
90 450 26.27 17.16 247.68 409.15 A
(client) 234.34 405.36 T
(B) 244.22 430.08 T
140.67 404.44 147.34 412.78 R
3 X
V
0 X
N
55.73 353.04 522.4 366.37 R
7 X
V
0 X
(Figure 10: Mechanics of an FTP-style \336le transfer using Tcl-DP) 135.25 358.37 T
211.47 385.76 209.39 387.88 218.86 393.03 213.56 383.64 4 Y
N
211.47 385.76 209.39 387.88 218.86 393.03 213.56 383.64 4 Y
V
147.5 408.04 M
 160.5 408.04 160.5 408.04 184 394.26 D
 200.76 384.44 206.33 380.7 211.29 385.58 D
2 Z
N
84.01 639.44 166.16 702.49 R
3 X
V
77.34 645.55 159.48 708.59 R
7 X
V
0 Z
0 X
N
7 X
90 450 26.3 17.16 119.2 674.15 G
0 X
90 450 26.3 17.16 119.2 674.15 A
(server) 104.55 670.36 T
(A) 115.71 695.08 T
84.01 548.44 166.16 611.49 R
3 X
V
77.34 554.55 159.48 617.59 R
7 X
V
0 X
N
7 X
90 450 26.27 17.16 119.18 583.15 G
0 X
90 450 26.27 17.16 119.18 583.15 A
(server) 104.52 579.36 T
(A) 115.71 604.08 T
216.51 549.44 298.66 612.49 R
3 X
V
209.84 555.55 291.98 618.59 R
7 X
V
0 X
N
7 X
90 450 26.27 17.16 251.68 584.15 G
0 X
90 450 26.27 17.16 251.68 584.15 A
(client) 238.34 580.36 T
(B) 248.22 605.08 T
218.01 580.44 224.67 588.78 R
3 X
V
0 X
N
1 14 Q
(Step 1: Client connects to server using) 303.5 678.04 T
(Step 2: Client sends its hostname, port) 303.5 586.04 T
(Step 3: Server connects to client, begins) 303.5 496.66 T
(number of the connect socket,) 346 572.04 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
(Tcl-DP and creates the connect) 345.5 664.04 T
(socket \050) 345.5 650.04 T
(\051.) 397.84 650.04 T
215.18 638.04 297.32 701.09 R
3 X
V
208.5 644.14 290.65 707.19 R
7 X
V
0 X
N
7 X
90 450 26.27 17.16 250.34 672.74 G
0 X
90 450 26.27 17.16 250.34 672.74 A
1 12 Q
(client) 237.01 668.96 T
(B) 246.88 693.68 T
216.67 669.04 223.34 677.37 R
3 X
V
0 X
N
141.11 603.8 143.32 601.79 134.11 596.11 138.91 605.81 4 Y
N
141.11 603.8 143.32 601.79 134.11 596.11 138.91 605.81 4 Y
V
230.5 593.04 M
 215.02 611.04 215.02 611.04 180.97 611.04 D
 154.83 611.04 148.2 611.59 141.28 603.98 D
2 Z
N
390.67 649.04 397.34 657.37 R
3 X
V
0 Z
0 X
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 14 Q
(and filename to server) 346 558.04 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
85.01 461.44 167.16 524.49 R
3 X
V
78.34 467.55 160.48 530.59 R
7 X
V
0 X
N
7 X
90 450 26.27 17.16 120.18 496.15 G
0 X
90 450 26.27 17.16 120.18 496.15 A
1 12 Q
(server) 105.52 492.36 T
(A) 116.71 517.08 T
217.51 462.44 299.66 525.49 R
3 X
V
210.84 468.55 292.98 531.59 R
7 X
V
0 X
N
7 X
90 450 26.27 17.16 252.68 497.15 G
0 X
90 450 26.27 17.16 252.68 497.15 A
(client) 239.34 493.36 T
(B) 249.22 518.08 T
219.01 493.44 225.67 501.78 R
3 X
V
0 X
N
145.67 492.44 152.34 500.78 R
3 X
V
0 X
N
207.72 496.04 207.72 499.02 218.1 496.04 207.72 493.06 4 Y
N
207.72 496.04 207.72 499.02 218.1 496.04 207.72 493.06 4 Y
V
152 496.04 207.47 496.04 2 L
2 Z
N
217.42 398.01 222.46 402.37 227.92 396.07 222.88 391.71 4 Y
3 X
V
0 Z
0 X
N
1 14 Q
(Step 4: Client accepts connection, closes) 303.5 416.66 T
(data transfer) 346.5 482.66 T
(connect socket, and transfers data) 345.5 402.66 T
(to local file.) 345.5 388.66 T
215.01 405.44 221.67 413.78 R
3 X
V
0 X
N
213.25 414.79 223.25 404.79 2 L
3 H
2 Z
N
223.25 414.79 213.25 404.79 2 L
N
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
73 349 538 349 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "26" 9
%%Page: "25" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
0 X
0 0 0 1 0 0 0 K
(If \324) 72 712 T
0 F
(w) 86.99 712 T
1 F
(\325 is used for this parameter, the function will be called when the socket becomes writable.) 94.19 712 T
-0.04 (If an error occurs when a file handler callback executes, the file handler is automatically removed) 72 684 P
0.65 (to prevent the program from going into an infinite loop if the file handler does not consume the) 72 670 P
-0.6 (data at the socket. You can manually remove a file handler by calling) 72 656 P
0 F
-1.44 (dp_filehandler) 400.13 656 P
1 F
-0.6 ( without) 500.93 656 P
(the) 72 642 T
0 F
(mode) 89.66 642 T
1 F
( or) 118.46 642 T
0 F
(callback) 134.46 642 T
1 F
( parameters.) 192.06 642 T
0.61 (Another way of detecting if a file is readable or writable is to use the) 72 614 P
0 F
1.46 (dp_isready) 414.06 614 P
1 F
0.61 ( command.) 486.06 614 P
0 F
-0.26 (Dp_isready) 72 600 P
1 F
-0.11 ( takes a file handle as a parameter and returns a list of two boolean values \050) 144 600 P
0 F
-0.26 (0) 502.83 600 P
1 F
-0.11 ( or) 510.03 600 P
0 F
-0.26 (1) 525.8 600 P
1 F
-0.11 (\051.) 533 600 P
0.2 (The first element of the return value indicates whether the file is readable. If it is) 72 586 P
0 F
0.49 (0) 464.86 586 P
1 F
0.2 (, then any call) 472.06 586 P
1.39 (that attempts to read data from the file \050e.g.,) 72 572 P
0 F
3.35 (gets) 298.52 572 P
1 F
1.39 ( or) 327.32 572 P
0 F
3.35 (dp_receive) 346.1 572 P
1 F
1.39 (\051 will block. The second) 418.1 572 P
1.57 (element of the return value indicates whether the file is writable. If it is) 72 558 P
0 F
3.76 (0) 438.21 558 P
1 F
1.57 (, then any call that) 445.41 558 P
(attempts to write data to the file \050e.g.,) 72 544 T
0 F
(puts) 254.98 544 T
1 F
( or) 283.78 544 T
0 F
(dp_send) 299.77 544 T
1 F
(\051 will block.) 350.17 544 T
(For example, if a call to read data on) 72 516 T
0 F
(s1) 251.29 516 T
1 F
( would block,) 265.69 516 T
0 F
(dp_isready) 334.36 516 T
1 F
( returns) 406.36 516 T
0 F
(0 1) 445.68 516 T
1 F
(:) 467.28 516 T
0 10 Q
(A% dp_isready $s1) 108 491.33 T
(0 1) 108 479.33 T
1 12 Q
(If B sends some data to A:) 72 452 T
0 10 Q
(B% dp_send $s2 \322hi there\323) 108 427.33 T
1 12 Q
(a call to read data on) 72 400 T
0 F
(s1) 174.64 400 T
1 F
( would not block, so) 189.04 400 T
0 F
(dp_isready) 289.7 400 T
1 F
( returns) 361.7 400 T
0 F
(1 1) 401.03 400 T
1 F
(:) 422.63 400 T
0 10 Q
(A% dp_isready $s1) 108 375.33 T
(1 1) 108 363.33 T
(A% dp_receive $s1) 108 351.33 T
(hi there) 108 339.33 T
221.38 312.8 72 312.8 2 L
V
0.6 H
0 Z
N
4 12 Q
(Example: A Simple FTP Ser) 72 314 T
227.74 312.8 221.74 312.8 2 L
V
N
(v) 221.74 314 T
238.1 312.8 227.44 312.8 2 L
V
N
(er) 227.44 314 T
1 F
-0.4 (Suppose you wanted to implement a simple FTP style server using Tcl-DP. One way to implement) 72 286 P
0.13 (it is to create a new TCP connection for each file transfer, which would be a four step process, as) 72 272 P
(illustrated in figure 10.) 72 258 T
(1.) 90 230 T
(The client opens the output \336le and creates a listening sock) 108 230 T
(et \050the) 391.18 230 T
3 F
(connect soc) 424.5 230 T
(k) 480.58 230 T
(et) 485.78 230 T
1 F
(\051) 494.45 230 T
(2.) 90 216 T
(The client sends the follo) 108 216 T
(wing information to the serv) 229.02 216 T
(er: the client\325) 365.5 216 T
(s hostname, the port) 428.82 216 T
(number of the connect sock) 108 202 T
(et, and the \336lename to transfer) 240.52 202 T
(.) 385.82 202 T
(3.) 90 188 T
-0.17 (The serv) 108 188 P
-0.17 (er opens the input \336le and a TCP connection to the client\325) 149.31 188 P
-0.17 (s connect sock) 423.8 188 P
-0.17 (et, which) 493.34 188 P
(gi) 108 174 T
(v) 117.04 174 T
(es the serv) 122.86 174 T
(er a) 173.33 174 T
3 F
(data soc) 193.98 174 T
(k) 234.07 174 T
(et) 239.28 174 T
1 F
(. It then enters a loop where it repeatedly reads the input \336le) 247.94 174 T
(and sends the data o) 108 160 T
(v) 204.47 160 T
(er to the client. It then closes the data sock) 210.29 160 T
(et and input \336le.) 414.13 160 T
(4.) 90 146 T
-0.12 (Meanwhile, the client accepts the connection on the connect sock) 108 146 P
-0.12 (et, closes it, and enters a) 420.74 146 P
-0.23 (loop where it recei) 108 132 P
-0.23 (v) 196.65 132 P
-0.23 (es data from the serv) 202.46 132 P
-0.23 (er and write it to the output \336le. If) 301.33 132 P
0 F
-0.56 (dp_receive) 465.23 132 P
1 F
-0.38 (e) 108 118 P
-0.38 (v) 113.03 118 P
-0.38 (er returns an error) 118.85 118 P
-0.38 (, it means the connection w) 203.52 118 P
-0.38 (as brok) 332.8 118 P
-0.38 (en, presumably because the transfer) 367.3 118 P
(is complete) 108 104 T
1 9.6 Q
(7) 163 108.8 T
1 12 Q
(. Since) 167.8 104 T
0 F
(dp_receive) 203.46 104 T
1 F
( automatically closes the \336le when the connection is) 275.46 104 T
(brok) 108 90 T
(en, the client only has to close the output \336le before returning.) 129.88 90 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "25" 10
%%Page: "24" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(A% dp_packetReceive $s1) 108 713.33 T
(message 1) 108 701.33 T
(A% dp_packetReceive $s1) 108 689.33 T
(message 2) 108 677.33 T
1 12 Q
-0.55 (It is possible that only part of the message is available at the time) 72 650 P
0 F
-1.33 (dp_packetReceive) 380.24 650 P
1 F
-0.55 ( is called.) 495.44 650 P
0.73 (In this case,) 72 636 P
0 F
1.76 (dp_packetReceive) 134.19 636 P
1 F
0.73 ( will buffer the partial result internally and return an empty) 249.39 636 P
(string. A subsequent call to) 72 622 T
0 F
(dp_packetReceive) 205.99 622 T
1 F
( will return the entire packet.) 321.19 622 T
0.44 (To preserve message boundaries,) 72 594 P
0 F
1.05 (dp_packetSend) 236.05 594 P
1 F
0.44 ( attaches a binary header onto the message,) 329.65 594 P
-0.23 (which) 72 580 P
0 F
-0.56 (dp_packetReceive) 104.09 580 P
1 F
-0.23 ( strips. The presence of this header means that applications must be) 219.29 580 P
-0.46 (careful about intermixing calls to) 72 566 P
0 F
-1.11 (dp_packetSend) 231.99 566 P
1 F
-0.46 ( and) 325.59 566 P
0 F
-1.11 (dp_packetReceive) 347.99 566 P
1 F
-0.46 ( with) 463.19 566 P
0 F
-1.11 (dp_send) 489.6 566 P
1 F
(and) 72 552 T
0 F
(dp_receive) 92.33 552 T
1 F
(, and other data transmission functions.) 164.33 552 T
140.69 524.8 72 524.8 2 L
V
0.6 H
0 Z
N
4 F
(File handlers) 72 526 T
1 F
0.92 (So far, the socket functions we have seen block if no data is present on the socket. That is, the) 72 498 P
0 (function call will not return until some data arrives. Blocking can cause problems, for example, if) 72 484 P
0.38 (a program needs to read data from several connections at once. To address this problem, Tcl-DP) 72 470 P
0.38 (provides a mechanism called) 72 456 P
3 F
0.38 (file handlers) 215.51 456 P
1 F
0.38 ( that arranges for a Tcl function to be called whenever) 276.23 456 P
0.01 (the file becomes) 72 442 P
3 F
0.01 (readable) 153.67 442 P
1 F
0.01 ( or) 196.33 442 P
3 F
0.01 (writable) 212.34 442 P
1 F
0.01 (. A socket becomes readable when another process attempts) 252.35 442 P
-0.25 (to connect to it, in the case of a listening socket, or when it has data waiting at its input, in the case) 72 428 P
3.54 (of a data socket. A data socket become writable whenever a call to) 72 414 P
0 F
8.48 (dp_send) 440.53 414 P
1 F
3.54 (, puts, or) 490.93 414 P
0 F
(dp_packetSend) 72 400 T
1 F
( will not block.) 165.6 400 T
1 9.6 Q
(6) 238.27 404.8 T
1 12 Q
2.48 (File handler callback procedures take two parameters. The first parameter, called the) 72 372 P
3 F
2.48 (mode) 511.01 372 P
1 F
2.48 (,) 537 372 P
-0.75 (indicates whether the socket has become readable or writable. It will be \324) 72 358 P
0 F
-1.8 (r) 413.25 358 P
1 F
-0.75 (\325 if the socket is readable,) 420.45 358 P
-0.12 (or \324) 72 344 P
0 F
-0.28 (w) 88.88 344 P
1 F
-0.12 (\325 if the socket is writable. The second parameter is the handle of the socket. For example, the) 96.07 344 P
0.7 (following fragment arranges for A to accept a new connection whenever one is requested on its) 72 330 P
0.25 (listening socket. The procedure) 72 316 P
0 F
0.6 (MyAccept) 226.64 316 P
1 F
0.25 ( calls) 284.24 316 P
0 F
0.6 (dp_accept) 312.73 316 P
1 F
0.25 ( to accept the connection, prints a) 377.53 316 P
(message on the screen, and adds the new socket to the) 72 302 T
0 F
(socketList) 334.61 302 T
1 F
( variable.) 406.61 302 T
0 10 Q
(A% proc MyAccept {mode file} {) 108 277.33 T
(global socketList) 144 265.33 T
(set info [dp_accept $file]) 144 253.33 T
(set newSocket [lindex $info 0]) 144 241.33 T
(puts \322Accepted connection from [lindex $info 1]\323) 144 229.33 T
(lappend socketList $newSocket) 144 217.33 T
(}) 126 205.33 T
(A% dp_filehandler $listeningSocket r MyAccept) 108 193.33 T
1 12 Q
8.37 (The call to) 72 166 P
0 F
20.08 (dp_filehandler) 151.43 166 P
1 F
8.37 ( arranges for) 252.23 166 P
0 F
20.08 (MyAccept) 340.96 166 P
1 F
8.37 ( to be called whenever) 398.57 166 P
0 F
2.33 (listeningSocket) 72 152 P
1 F
0.97 ( becomes readable. The second parameter to) 180 152 P
0 F
2.33 (dp_filehandler) 402.73 152 P
1 F
0.97 ( \050\324) 503.53 152 P
0 F
2.33 (r) 515.5 152 P
1 F
0.97 (\325 in) 522.7 152 P
-0.72 (the example above\051 indicates that the file handler should only be called when the socket is readable.) 72 138 P
72 108 540 123 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 121 225 121 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(6.) 90 101.33 T
-0.22 (Such calls can block if the) 102 101.33 P
-0.22 (y are communicating o) 206.03 101.33 P
-0.22 (v) 297.16 101.33 P
-0.22 (er a particularly slo) 302.01 101.33 P
-0.22 (w connection, since the system will) 378.59 101.33 P
(only b) 102 89.33 T
(uf) 127.08 89.33 T
(fer a limited amount of data. The amount of data b) 135.16 89.33 T
(uf) 336.87 89.33 T
(fered can be adjusted using the) 344.95 89.33 T
0 F
(dp_socketOption) 102 77.33 T
1 F
( command, discussed belo) 192 77.33 T
(w) 296.74 77.33 T
(.) 303.31 77.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "24" 11
%%Page: "23" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
217.42 710.8 72 710.8 2 L
0 X
0 0 0 1 0 0 0 K
V
0.6 H
0 Z
N
4 12 Q
(Sending and receiving data) 72 712 T
1 F
0.43 (The simplest way to send data from one application to another is to use the Tcl functions) 72 684 P
0 F
1.02 (gets) 508.2 684 P
1 F
0.43 (,) 537 684 P
0 F
(read) 72 670 T
1 F
(, and) 100.8 670 T
0 F
(puts) 127.13 670 T
1 F
(. For example, in the following fragment B sends the string \322Hello world\323 to A:) 155.93 670 T
0 10 Q
(B% puts $s2 \322hello world\323) 108 645.33 T
1 12 Q
(To receive the string, A calls) 72 618 T
0 F
(gets) 213.64 618 T
1 F
(:) 242.44 618 T
0 10 Q
(A% gets $s1) 108 593.33 T
(hello) 108 581.33 T
1 12 Q
-0.7 (Another interface for sending and receiving data is) 72 554 P
0 F
-1.68 (dp_send) 313.01 554 P
1 F
-0.7 ( and) 363.41 554 P
0 F
-1.68 (dp_receive) 385.34 554 P
1 F
-0.7 (.) 457.34 554 P
0 F
-1.68 (Dp_send) 462.64 554 P
1 F
-0.7 ( takes) 513.04 554 P
0.79 (the same arguments as) 72 540 P
0 F
1.91 (puts) 186.49 540 P
1 F
0.79 ( and serves the same function.) 215.29 540 P
0 F
1.91 (Dp_receive) 367.69 540 P
1 F
0.79 ( is similar to the Tcl) 439.69 540 P
0 F
1.8 (read) 72 526 P
1 F
0.75 ( command, except it takes an optional) 100.8 526 P
0 F
1.8 (-peek) 290.7 526 P
1 F
0.75 ( flag indicating that the data should be read) 326.7 526 P
0.42 (from the socket, but not consumed, so that a subsequent call to) 72 512 P
0 F
1.01 (dp_receive) 381 512 P
1 F
0.42 ( will see the same) 453 512 P
1 (data. In addition, if the connection is ever broken,) 72 498 P
0 F
2.4 (dp_send) 322.95 498 P
1 F
1 ( and) 373.35 498 P
0 F
2.4 (dp_receive) 398.67 498 P
1 F
1 ( automatically) 470.67 498 P
(close the socket.) 72 484 T
0.94 (TCP sockets provide a stream interface, which can cause unexpected results if you want to use) 72 456 P
0.17 (them to send messages between processes. For example, suppose B sends several messages to A.) 72 442 P
0.56 (When A reads its socket, the messages might be concatenated or only part of a message may be) 72 428 P
1.58 (present. The following code fragment shows this effect in action. If B executes the following) 72 414 P
(commands) 72 400 T
0 10 Q
(B% dp_send $s2 \322message 1\323) 108 375.33 T
(B% dp_send $s2 \322message 2\323) 108 363.33 T
1 12 Q
(When A calls) 72 336 T
0 F
(dp_receive) 140.32 336 T
1 F
(, it gets both messages at once:) 212.32 336 T
0 10 Q
(A% dp_receive $s1) 108 311.33 T
(message 1) 108 299.33 T
(message 2) 108 287.33 T
1 12 Q
-0.54 (Since some applications want to preserve message boundaries and want the reliability of TCP, Tcl-) 72 260 P
4.74 (DP provides two functions,) 72 246 P
0 F
11.36 (dp_packetSend) 225.27 246 P
1 F
4.74 ( and) 318.87 246 P
0 F
11.36 (dp_packetReceive) 351.67 246 P
1 F
4.74 (, that provide) 466.87 246 P
-0.4 (message-oriented delivery. For example, suppose B uses) 72 232 P
0 F
-0.95 (dp_packetSend) 344.19 232 P
1 F
-0.4 ( instead of) 437.79 232 P
0 F
-0.95 (dp_send) 489.6 232 P
1 F
(in the example above:) 72 218 T
0 10 Q
(B% dp_packetSend $s2 \322message 1\323) 108 193.33 T
(B% dp_packetSend $s2 \322message 2\323) 108 181.33 T
1 12 Q
(When A calls) 72 154 T
0 F
(dp_packetReceive) 140.32 154 T
1 F
(, it gets one message per function call.) 255.52 154 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "23" 12
%%Page: "22" 13
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
0 X
0 0 0 1 0 0 0 K
0.27 (After creating the listening socket, the server typically waits for a connection to arrive by calling) 72 712 P
0 F
4.6 (dp_accept) 72 698 P
1 F
1.92 (, which will return when another process attempts to connect to the socket. For) 136.8 698 P
(example, the following code causes A to block while waiting for a client:) 72 684 T
0 10 Q
(A% set newClient [dp_accept $listeningSocket]) 108 659.33 T
1 12 Q
0.43 (Another process connects to A using another form of) 72 632 P
0 F
1.04 (dp_connect) 333.51 632 P
1 F
0.43 (. In this form, the hostname) 405.51 632 P
-0.4 (of the machine on which the server is running, and the port number of the server socket, are passed) 72 618 P
0.25 (as parameters to) 72 604 P
0 F
0.6 (dp_connect) 153.72 604 P
1 F
0.25 (. If the hostname of A is) 225.72 604 P
0 F
0.6 (mayo.sandwich.com) 346.77 604 P
1 F
0.25 (, the following) 469.17 604 P
(code will connect machine B to A:) 72 590 T
0 10 Q
(B% set info [dp_connect mayo.sandwich.com 1905]) 108 565.33 T
(file4 3833) 108 553.33 T
(B% set s2 [lindex $info 0]) 108 541.33 T
1 12 Q
-0.37 (As with the previous call to) 72 514 P
0 F
-0.89 (dp_connect) 205.1 514 P
1 F
-0.37 (, a handle to the socket \050e.g.,) 277.1 514 P
0 F
-0.89 (file4) 414.8 514 P
1 F
-0.37 (\051 and the operating) 450.8 514 P
(system selected port number of the socket \0503833\051 are returned.) 72 500 T
-0.24 (B\325s attempt to connect to A will cause A\325s call to) 72 472 P
0 F
-0.58 (dp_accept) 308.96 472 P
1 F
-0.24 ( to return, setting the) 373.76 472 P
0 F
-0.58 (newClient) 475.2 472 P
1 F
0.19 (variable to the handle of the new socket \050e.g.,) 72 458 P
0 F
0.47 (file5) 295.03 458 P
1 F
0.19 (\051 and the Internet address of the connecting) 331.03 458 P
(process \050e.g.) 72 444 T
0 F
(128.83.218.21) 135.31 444 T
1 F
(\051) 228.91 444 T
0 10 Q
(A% set newClient [dp_accept $listeningSocket]) 108 419.33 T
(file5 128.83.218.21) 108 407.33 T
(A% set s1 [lindex $newClient 0]) 108 395.33 T
(file5) 108 383.33 T
164.69 356.8 72 356.8 2 L
V
0.6 H
0 Z
N
4 12 Q
(Unix Domain Soc) 72 358 T
170.45 356.8 164.45 356.8 2 L
V
N
(k) 164.45 358 T
186.22 356.8 170.21 356.8 2 L
V
N
(ets) 170.21 358 T
1 F
0.34 (The example above created) 72 330 P
3 F
0.34 (Internet domain) 207.98 330 P
1 F
0.34 ( sockets. That is, B uses an Internet address and port) 285.31 330 P
1.03 (number to rendezvous with A\325s socket. On Unix systems, another naming scheme, called) 72 316 P
3 F
1.03 (Unix) 516.67 316 P
1.7 (domain) 72 302 P
1 F
1.7 ( sockets, can be used to available for connecting processes if they reside on the same) 108 302 P
1.79 (machine. In this case, a file name \050e.g.,) 72 288 P
0 F
4.29 (/tmp/mysocket) 276.58 288 P
1 F
1.79 (\051 is used to name the socket. The) 370.18 288 P
(following example shows a connection using Unix domain sockets.) 72 274 T
(Server code:) 72 246 T
0 10 Q
(% set f [dp_connect -server /tmp/mysocket]) 108 233.33 T
(file4) 108 221.33 T
(% set s1 [dp_accept $f]) 108 209.33 T
1 12 Q
(Client Code:) 72 182 T
0 10 Q
(% set s2 [dp_connect /tmp/mysocket]) 108 169.33 T
(file4) 108 157.33 T
1 12 Q
-0.45 (Regardless of whether Unix or Internet domain sockets are used, processes communicate using the) 72 130 P
0.03 (handles of the sockets as arguments to Tcl-DP function. In the examples, these handles are stored) 72 116 P
(in the variables) 72 102 T
0 F
(s1) 148.32 102 T
1 F
( and) 162.72 102 T
0 F
(s2) 186.05 102 T
1 F
(.) 200.45 102 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "22" 13
%%Page: "21" 14
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
0 X
0 0 0 1 0 0 0 K
(will discuss the primitives associated with unconnected \050UDP and IP-multicast\051 sockets later.) 72 712 T
118.01 684.8 72 684.8 2 L
V
0.6 H
0 Z
N
4 F
(TCP soc) 72 686 T
123.77 684.8 117.77 684.8 2 L
V
N
(k) 117.77 686 T
139.54 684.8 123.53 684.8 2 L
V
N
(ets) 123.53 686 T
1 F
1.51 (Connecting two processes using TCP is a three step process, illustrated in figure 9. First, one) 72 658 P
1.45 (process, say A, creates a) 72 644 P
3 F
1.45 (listening) 199.54 644 P
1 F
1.45 ( socket with an associated) 240.88 644 P
3 F
1.45 (name) 375.78 644 P
1 F
1.45 ( so that other processes can) 401.78 644 P
-0.46 (contact it. The name can be either a Unix filename or an Internet address and port number. Second,) 72 630 P
0.2 (another process \050B\051 creates another socket and) 72 616 P
3 F
0.2 (connects) 299.65 616 P
1 F
0.2 ( to A\325s listening socket. Third, A) 341.63 616 P
3 F
0.2 (accepts) 504.01 616 P
1 F
0.86 (the connection, which creates a new socket so that other processes can contact A using the A\325s) 72 602 P
(listening socket.) 72 588 T
0.22 (In Tcl-DP,) 72 560 P
0 F
0.54 (dp_connect) 126.77 560 P
1 F
0.22 ( is used for steps one and two, and) 198.77 560 P
0 F
0.54 (dp_accept) 368.77 560 P
1 F
0.22 ( is used for step three.) 433.57 560 P
0 F
0.85 (Dp_connect) 72 546 P
1 F
0.36 ( will create a listening sockets if the) 144 546 P
0 F
0.85 (-server) 322.15 546 P
1 F
0.36 ( flag is provided. For example, the) 372.55 546 P
2.13 (following command creates a listening socket on port 1905 and assigns the socket identifier) 72 532 P
(\050) 72 518 T
0 F
(file4) 76 518 T
1 F
(\051 to the variable) 112 518 T
0 F
(listeningSocket) 190.64 518 T
1 F
(.) 298.64 518 T
0 10 Q
(A% set info [dp_connect -server 1905]) 108 493.33 T
(file4 1905) 108 481.33 T
(A% set listeningSocket [lindex $info 0]) 108 469.33 T
(file4) 108 457.33 T
1 12 Q
0 (The third parameter to) 72 430 P
0 F
0.01 (dp_connect) 182.66 430 P
1 F
0 ( is the port number. Only one socket can be associated with) 254.66 430 P
0.14 (a given port at any time. If another socket is already open on that port,) 72 416 P
0 F
0.34 (dp_connect) 414.39 416 P
1 F
0.14 ( will return) 486.39 416 P
0.05 (an error. You can have the operating system select an unused port by specifying a port number of) 72 402 P
0 F
-1.58 (0) 72 388 P
1 F
-0.66 ( to) 79.2 388 P
0 F
-1.58 (dp_connect) 93.22 388 P
1 F
-0.66 (. No matter who selects the port number,) 165.22 388 P
0 F
-1.58 (dp_connect) 358.61 388 P
1 F
-0.66 ( will return a list of two) 430.61 388 P
(values: the identifier for the socket and its port number.) 72 374 T
72 72 540 367.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
100.51 101.4 182.65 164.45 R
3 X
0 0 0 1 0 0 0 K
V
93.83 107.51 175.98 170.55 R
7 X
V
0.5 H
0 Z
0 X
N
7 X
90 450 26.27 17.16 135.67 136.11 G
0 X
90 450 26.27 17.16 135.67 136.11 A
1 12 Q
(server) 121.01 132.32 T
(A) 132.21 157.04 T
160.38 131.33 165.41 126.97 159.96 120.67 154.92 125.03 4 Y
3 X
V
0 X
N
233.01 102.4 315.15 165.45 R
3 X
V
226.33 108.51 308.48 171.55 R
7 X
V
0 X
N
7 X
90 450 26.27 17.16 268.17 137.11 G
0 X
90 450 26.27 17.16 268.17 137.11 A
(client) 254.84 133.33 T
(B) 264.71 158.04 T
234.5 133.4 241.17 141.74 R
3 X
V
0 X
N
161.17 132.4 167.83 140.74 R
3 X
V
0 X
N
72.22 75 538.89 88.33 R
7 X
V
0 X
(Figure 9: Connecting processes using TCP) 203.06 80.33 T
171.83 117.98 169.98 115.65 163.71 124.43 173.68 120.3 4 Y
N
171.83 117.98 169.98 115.65 163.71 124.43 173.68 120.3 4 Y
V
223.74 136.32 223.56 139.29 234.1 136.95 223.92 133.35 4 Y
N
223.74 136.32 223.56 139.29 234.1 136.95 223.92 133.35 4 Y
V
223.49 136.3 M
 218.28 135.99 212.77 132.48 198.5 125.5 D
 182.55 117.7 176.73 114.08 172.03 117.82 D
N
100.51 283.4 182.65 346.45 R
3 X
V
93.83 289.51 175.98 352.55 R
7 X
V
0 X
N
7 X
90 450 26.27 17.16 135.67 318.11 G
0 X
90 450 26.27 17.16 135.67 318.11 A
(server) 121.01 314.32 T
(A) 132.21 339.04 T
161.17 314.4 167.83 322.74 R
3 X
V
0 X
N
100.51 192.4 182.65 255.45 R
3 X
V
93.83 198.51 175.98 261.55 R
7 X
V
0 X
N
7 X
90 450 26.27 17.16 135.67 227.11 G
0 X
90 450 26.27 17.16 135.67 227.11 A
(server) 121.01 223.33 T
(A) 132.21 248.04 T
233.01 193.4 315.15 256.45 R
3 X
V
226.33 199.51 308.48 262.55 R
7 X
V
0 X
N
7 X
90 450 26.27 17.16 268.17 228.11 G
0 X
90 450 26.27 17.16 268.17 228.11 A
(client) 254.84 224.32 T
(B) 264.71 249.04 T
234.5 224.4 241.17 232.74 R
3 X
V
0 X
N
161.17 223.4 167.83 231.74 R
3 X
V
0 X
N
179.28 228 179.28 225.02 168.91 228 179.28 230.97 4 Y
N
179.28 228 179.28 225.02 168.91 228 179.28 230.97 4 Y
V
235 228 179.53 228 2 L
3 X
V
2 Z
0 X
N
1 14 Q
(Step 1: A creates a listening socket) 319 322 T
(Step 2: B requests connection) 356 230 T
(Step 3: A accepts connection,) 356 151.62 T
(creating a new socket) 399 137 T
(as a result.) 399 122.38 T
73.5 361.17 538.5 361.17 2 L
1 H
N
(to A) 398.5 216 T
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "21" 14
%%Page: "20" 15
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(ns_Register addService /demo/whiteboard mayo.sandwich.com \134) 108 713.33 T
(\322dptcl -f /) 180 701.33 T
(home/tcldp/ns/wbServer.tcl\323) 246 701.33 T
(ns_Register aliasService /demo/whiteboard /wbServer) 108 689.33 T
1 12 Q
1.87 (The name server can associate several names, called aliases, with a single process. A call to) 72 662 P
0 F
3.34 (NS_GetServiceConn) 72 648 P
1 F
1.39 ( will search through service names and their aliases for a match. The) 194.4 648 P
0.91 (name server supports pattern matching on service names similar to Unix file name matching to) 72 634 P
5.53 (locate servers. The interface to this pattern matching function is) 72 620 P
0 F
13.26 (NS_FindService) 436.2 620 P
1 F
5.53 (.) 537 620 P
0 F
1.89 (NS_FindService) 72 606 P
1 F
0.79 (returns a list of all the matching names, similar to the way the Tcl) 181.89 606 P
0 F
1.89 (glob) 511.2 606 P
1 F
0.09 (command returns a list of file names that match a pattern. For example, the following call locates) 72 592 P
(all servers in the demo tree:) 72 578 T
0 10 Q
(B% set demoServers [NS_FindService /demo/*]) 108 553.33 T
1 12 Q
0.3 (The use of the slash \050\322/\323\051 character to give a hierarchical structure to the process names is only a) 72 526 P
2.39 (convention.) 72 512 P
0 F
5.73 (NS_FindService) 133.71 512 P
1 F
2.39 ( uses the Tcl string match command to search for matches.) 234.51 512 P
0.83 (Consequently, you can establish any naming scheme you like, but we encourage you to use the) 72 498 P
(naming convention presented above \050i.e., use slash characters\051 to ensure uniformity.) 72 484 T
0.43 (The name server is a network wide service built using Tcl-DP. It runs on a well known host and) 72 456 P
0.56 (port number in your network. The exact host and port are specified in the file) 72 442 P
0 F
1.33 ($dp_library/) 453.6 442 P
2.76 (ns/nsconfig.tcl) 72 428 P
1 F
1.15 (. This immediately bring to mind the following questions: who starts the) 180 428 P
-0.4 (name server and what happens if the machine that runs the name server crashes? The answer to the) 72 414 P
-0.01 (first question is that the name server is typically started by an entry in) 72 400 P
0 F
-0.03 (/etc/rc.local) 409.11 400 P
1 F
-0.01 ( when a) 502.71 400 P
0.63 (designated machine boots. The answer to the second question is that backup copies of the name) 72 386 P
-0.42 (server can be run at the same time as the primary server. The machines on which the backup server) 72 372 P
-0.57 (are run are specified in the file) 72 358 P
0 F
-1.38 ($dp_library/ns/nsconfig.tcl) 217.59 358 P
1 F
-0.57 (. All name server functions) 411.99 358 P
-0.12 (accessible from the client, such as) 72 344 P
0 F
-0.28 (NS_GetServiceConn) 237.6 344 P
1 F
-0.12 ( and) 360.01 344 P
0 F
-0.28 (NS_FindService) 383.1 344 P
1 F
-0.12 (, will locate) 483.9 344 P
0.3 (the primary server and connect to it. If the primary name server crashes, the backups elect a new) 72 330 P
1.93 (primary name server. More details on the design and implementation of the name server are) 72 316 P
(available elsewhere [tcl-95 ref].) 72 302 T
2 18 Q
(Tcl-DP Communication Ser) 72 266 T
(vices) 285.8 266 T
1 12 Q
1.07 (This section shows you how to use Tcl-DP\325s interfaces to TCP, UDP, and IP-multicast. It also) 72 235 P
0.53 (shows you how to query and set various properties of sockets, such as buffer sizes and blocking) 72 221 P
0.88 (properties, to gain more control over the properties of the communication channel. Finally, this) 72 207 P
-0.26 (section will show you how to access the Internet Domain Name Service \050DNS\051 using Tcl-DP. The) 72 193 P
(DNS maps internet addresses \050e.g., 128.32.149.117\051 to host names \050e.g., toe.cs.berkeley.edu\051.) 72 179 T
87.34 151.8 72 151.8 2 L
V
0.6 H
0 Z
N
4 F
(Re) 72 153 T
102.31 151.8 86.98 151.8 2 L
V
N
(vie) 86.98 153 T
146.09 151.8 102.07 151.8 2 L
V
N
(w of Ber) 102.07 153 T
152.27 151.8 146.27 151.8 2 L
V
N
(k) 146.27 153 T
168.04 151.8 152.03 151.8 2 L
V
N
(ele) 152.03 153 T
197.81 151.8 167.8 151.8 2 L
V
N
(y Soc) 167.8 153 T
203.57 151.8 197.57 151.8 2 L
V
N
(k) 197.57 153 T
219.34 151.8 203.33 151.8 2 L
V
N
(ets) 203.33 153 T
1 F
1.64 (Before discussing Tcl-DP\325s mechanisms for connecting two processes, we will briefly review) 72 125 P
-0.21 (Berkeley sockets. Sockets come in several varieties, distinguished by the communication protocol) 72 111 P
0.28 (\050e.g., TCP or UDP\051, how the socket is identified, and whether or not the socket is the connection) 72 97 P
-0.02 (initiator. In this section, we will discuss the primitives used for) 72 83 P
3 F
-0.02 (connected) 376.78 83 P
1 F
-0.02 ( \050i.e., TCP\051 sockets. We) 425.43 83 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "20" 15
%%Page: "19" 16
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(A% proc Subscribe {} {) 108 713.33 T
(global dp_rpcFile clients log) 144 701.33 T
(lappend clients $dp_rpcFile) 144 689.33 T
(dp_atclose $dp_rpcFile append \134) 144 677.33 T
(\322set clients [ldelete $dp_rpcFile $clients]\323) 162 665.33 T
(foreach cmd $log {) 144 653.33 T
(eval dp_RDO $dp_rpcFile $cmd) 162 641.33 T
(}) 144 629.33 T
(}) 126 617.33 T
150.02 590.8 72 590.8 2 L
V
0.6 H
0 Z
N
4 12 Q
(The Name Ser) 72 592 T
156.38 590.8 150.38 590.8 2 L
V
N
(v) 150.38 592 T
166.75 590.8 156.08 590.8 2 L
V
N
(er) 156.08 592 T
1 F
0.03 (As distributed applications get more complex, starting and stopping servers, locating a server and) 72 564 P
-0.03 (the port on which it is listening, and keeping track of the server state becomes more of a problem.) 72 550 P
-0.58 (For example, in our whiteboard program, we want to start the client application and have it connect) 72 536 P
0.41 (to a running server if one is available or start one if it is not running. The problem is how do we) 72 522 P
1.83 (locate a running server or start one if it is not running? The Tcl-DP) 72 508 P
3 F
1.83 (name server) 422.2 508 P
1 F
1.83 ( solves this) 483.01 508 P
(problem.) 72 494 T
0.41 (The name server associates a name with each process which are patterned after Unix file names.) 72 466 P
(For example, the name of the whiteboard server might be) 72 452 T
0 F
(/demo/whiteboard) 350.28 452 T
1 F
(.) 465.48 452 T
0.64 (When the server starts up, it uses the procedure) 72 424 P
0 F
1.53 (NS_SrvcInit) 307.68 424 P
1 F
0.64 ( to contact the name server and) 386.88 424 P
-0.29 (declare its name) 72 410 P
1 9.6 Q
-0.23 (5) 149.4 414.8 P
1 12 Q
-0.29 (. For example, the following commands tells the name server that the whiteboard) 154.2 410 P
(server is running on) 72 396 T
0 F
(mayo.sandwich.com) 170.65 396 T
1 F
(, port 4500:) 293.05 396 T
0 10 Q
(A% NS_SrvcInit /demo/whiteboard mayo.sandwich.com 4500) 108 371.33 T
1 12 Q
0.56 (Registering a name with the name server adds it to the list of server that the name server knows) 72 344 P
2.87 (about. We call a registered name a) 72 330 P
3 F
2.87 (service) 260.73 330 P
1 F
2.87 (. When a whiteboard client wants to locate the) 294.72 330 P
8.5 (whiteboard server, it issues an) 72 316 P
0 F
20.4 (NS_GetServiceConn) 262.46 316 P
1 F
8.5 ( call to find the service.) 384.86 316 P
0 F
-1.76 (NS_GetServiceConn) 72 302 P
1 F
-0.74 ( takes the name of a service as an argument, contacts the name server, and) 194.4 302 P
(returns a host and port number where the server can be contacted. For example, the code) 72 288 T
0 10 Q
(B% set whiteboardServer [NS_GetServiceConn /demo/whiteboard]) 108 263.33 T
1 12 Q
0.89 (queries the name server to get the host and port number of the whiteboard server which can be) 72 236 P
(passed to) 72 222 T
0 F
(dp_MakeRPCClient) 119.33 222 T
1 F
(.) 234.53 222 T
0.02 (If the server is not running when) 72 194 P
0 F
0.06 (NS_GetServiceConn) 231.8 194 P
1 F
0.02 ( is called, the name server can start the) 354.2 194 P
1.74 (process for you if the service is registered as an) 72 180 P
3 F
1.74 (autostart) 320 180 P
1 F
1.74 ( service. Only processes marked as) 363.35 180 P
0.25 (autostart in the file) 72 166 P
0 F
0.59 ($dp_library/ns/nsconfig) 166.3 166 P
1 F
0.25 ( can be started automatically. For example,) 331.9 166 P
(adding the following line to this file makes the whiteboard an autostart service:) 72 152 T
72 84 540 99 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 97 225 97 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(5.) 90 77.33 T
(The pre\336x for all name serv) 102 77.33 T
(er commands is) 213.21 77.33 T
0 F
(NS_) 278.48 77.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "19" 16
%%Page: "18" 17
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
0 X
0 0 0 1 0 0 0 K
3.96 (allow inbound RPC\325s to be checked on any socket \050client side or server side\051, use the) 72 712 P
0 F
0.72 (dp_SetCheckCmd) 72 698 P
1 F
0.3 ( function. For example, to add client side command checking, the client can) 172.8 698 P
(execute the following command:) 72 684 T
0 10 Q
(dp_SetCheckCmd $server ClientCheckCommand) 108 659.33 T
1 12 Q
11.31 (where) 72 632 P
0 F
27.14 (ClientCheckCommand) 115.62 632 P
1 F
11.31 ( is a command checking procedure similar to) 245.22 632 P
0 F
0.9 (WhiteboardCmdCheck) 72 618 P
1 F
0.38 ( in figure 8. Alternatively, the client check command can be specified) 201.6 618 P
(when the connection is made:) 72 604 T
0 10 Q
(set server [dp_MakeRPCClient $host 4544 ClientCheckCommand]) 108 579.33 T
103.34 552.8 72 552.8 2 L
V
0.6 H
0 Z
N
4 12 Q
(Clean) 72 554 T
116.57 552.8 103.22 552.8 2 L
V
N
(up) 103.22 554 T
1 F
-0.71 (In distributed programs like the whiteboard example, clients and servers crash or shutdown without) 72 526 P
2.13 (warning. These crashes can cause unexpected, often fatal, errors to occur. For example, if a) 72 512 P
1.15 (whiteboard client dies unexpectedly, the server wants to remove the client from the) 72 498 P
0 F
2.77 (clients) 489.6 498 P
1 F
-0.11 (variable. The) 72 484 P
0 F
-0.25 (dp_atclose) 138.1 484 P
1 F
-0.11 ( command is designed to handle such clean up actions automatically.) 210.1 484 P
0 F
0.81 (Dp_atclose) 72 456 P
1 F
0.34 ( associates a list of Tcl commands with a file. Just before the file is closed, which) 144 456 P
1.54 (happens automatically if a connection is broken, each command in the list is called. The first) 72 442 P
1.38 (argument to) 72 428 P
0 F
3.31 (dp_atclose) 135.42 428 P
1 F
1.38 ( is a file identifier \050e.g.,) 207.42 428 P
0 F
3.31 ($server) 331.35 428 P
1 F
1.38 (\051 that specifies the target file or) 381.75 428 P
1.33 (connection and the second argument is a command. Valid commands are:) 72 414 P
0 F
3.2 (append) 443.27 414 P
1 F
1.33 (,) 486.47 414 P
0 F
3.2 (remove) 493.8 414 P
1 F
1.33 (,) 537 414 P
0 F
4.4 (appendUnique) 72 400 P
1 F
1.83 (,) 158.4 400 P
0 F
4.4 (insert) 166.23 400 P
1 F
1.83 (, and) 209.43 400 P
0 F
4.4 (list) 239.42 400 P
1 F
1.83 (. A) 268.22 400 P
0 F
4.4 (ppend) 284.72 400 P
1 F
1.83 ( adds a new callback to the end of the list.) 320.72 400 P
0 F
-1 (Remove) 72 386 P
1 F
-0.42 ( deletes a previous appended callback.) 115.2 386 P
0 F
-1 (AppendUnique) 299.64 386 P
1 F
-0.42 ( adds a callback to the end of the) 386.04 386 P
0.28 (list, but only if it is not already part of the list.) 72 372 P
0 F
0.66 (Insert) 299.31 372 P
1 F
0.28 ( places a callback at the beginning of the) 342.51 372 P
-0.5 (list, and) 72 358 P
0 F
-1.21 (list) 112 358 P
1 F
-0.5 ( returns the current callback list. Table 2 lists the valid commands and arguments for) 140.79 358 P
0 F
(dp_atclose) 72 344 T
1 9.6 Q
(4) 144 348.8 T
1 12 Q
(.) 148.8 344 T
-0.37 (We can use) 72 150 P
0 F
-0.89 (dp_atclose) 129.2 150 P
1 F
-0.37 ( in the whiteboard program to remove a client that has crashed from the) 201.2 150 P
0 F
-0.3 (clients) 72 136 P
1 F
-0.12 ( variable by making the following change to the) 122.4 136 P
0 F
-0.3 (Subscribe) 354.25 136 P
1 F
-0.12 ( command. The modified) 419.05 136 P
(code is shown in boldface:) 72 122 T
72 96 540 111 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 109 225 109 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(4.) 90 89.33 T
(Tcl-DP has another cleanup command,) 102 89.33 T
0 F
(dp_atexit) 260.3 89.33 T
1 F
(, that is similar to) 314.3 89.33 T
0 F
(dp_atclose) 386.53 89.33 T
1 F
(.) 446.53 89.33 T
0 F
(Dp_atexit) 451.53 89.33 T
1 F
(callbacks e) 102 77.33 T
(x) 146 77.33 T
(ecute just before the program e) 150.85 77.33 T
(xits.) 274.83 77.33 T
2 12 Q
(T) 160.43 320 T
(able 2: Ar) 167.33 320 T
(guments f) 218.54 320 T
(or) 268.56 320 T
5 F
(dp_atclose) 282.89 320 T
2 F
(and) 362.09 320 T
5 F
(dp_atexit) 384.43 320 T
1 F
(Command) 97.17 294 T
(Ar) 188.12 294 T
(guments) 200.57 294 T
(Description) 369.35 294 T
0 F
(append) 78 270 T
(callback) 178.33 270 T
1 F
(In) 263.02 270 T
(v) 272.54 270 T
(ok) 278.3 270 T
(e) 290.18 270 T
0 F
(callback) 298.51 270 T
1 F
( when \336le closes) 356.11 270 T
0 F
(appendUnique) 78 248 T
(callback) 178.33 248 T
1 F
(In) 263.02 248 T
(v) 272.54 248 T
(ok) 278.3 248 T
(e) 290.18 248 T
0 F
(callback) 298.51 248 T
1 F
( precisely once when \336le closes) 356.11 248 T
0 F
(list) 78 226 T
(-) 178.33 226 T
1 F
(Return \336le closing callback list) 263.02 226 T
0 F
(remove) 78 204 T
(callback) 178.33 204 T
1 F
(Remo) 263.02 204 T
(v) 291.51 204 T
(e) 297.33 204 T
0 F
(callback) 305.66 204 T
1 F
( from \336le closing callback list) 363.26 204 T
0 F
(insert) 78 182 T
(callback) 178.33 182 T
1 F
(Insert) 263.02 182 T
0 F
(callback) 293.35 182 T
1 F
( at be) 350.95 182 T
(ginning of callback list) 376.76 182 T
72 309.75 72 174.25 2 L
V
0.5 H
0 Z
N
172.33 310.25 172.33 173.75 2 L
V
N
257.02 310.25 257.02 173.75 2 L
V
N
537.67 309.75 537.67 174.25 2 L
V
N
71.75 310 537.92 310 2 L
V
N
72.25 285.25 537.42 285.25 2 L
V
N
72.25 282.75 537.42 282.75 2 L
V
N
71.75 262 537.92 262 2 L
V
N
71.75 240 537.92 240 2 L
V
N
71.75 218 537.92 218 2 L
V
N
71.75 196 537.92 196 2 L
V
N
71.75 174 537.92 174 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "18" 17
%%Page: "17" 18
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
0 X
0 0 0 1 0 0 0 K
(other commands are disallowed.) 72 712 T
0 10 Q
(A% proc CheckCmd {cmd args} {) 108 687.33 T
(case $cmd in {) 144 675.33 T
(Subscribe return;) 162 663.33 T
(puts) 162 651.33 T
({) 186 651.33 T
(set file [lindex $args 0]) 180 639.33 T
(if {[string compare $file stderr] != 0]} {) 180 627.33 T
(return -code break) 198 615.33 T
(}) 180 603.33 T
(return;) 180 591.33 T
(}) 180 579.33 T
(set) 162 567.33 T
({) 180 567.33 T
(if {[llength $args] != 1} {) 180 555.33 T
(return -code break) 198 543.33 T
(}) 180 531.33 T
(return;) 180 519.33 T
(}) 180 507.33 T
(eval) 162 495.33 T
( {return -code continue}) 186 495.33 T
(catch) 162 483.33 T
( {return -code continue}) 192 483.33 T
(if) 162 471.33 T
({return -code continue}) 180 471.33 T
(}) 144 459.33 T
(return -code break;) 144 447.33 T
(}) 126 435.33 T
1 12 Q
0.15 (We will now use both features to make the whiteboard program more secure. We will only allow) 72 408 P
0.8 (clients whose IP-address is in the) 72 394 P
0 F
1.93 (whiteboard-clients) 239.47 394 P
1 F
0.8 ( file to connect, and we will verify) 369.07 394 P
(that the clients are executing legal commands. The modified code is shown in figure 8.) 72 380 T
-0.1 (Of course, the server can still execute commands in the client. This capability can cause problems) 72 352 P
0.06 (in environments where the user can not verify that a server is authentic. For example, a client can) 72 338 P
0.86 (innocently connect to a server and the server can remove all files in the client environment. To) 72 324 P
72 72 540 720 C
72 72 540 310.97 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 74.47 540 300.14 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(1) 72 294.14 T
(# Set the list of allowed clients from whiteboard-clients) 108 294.14 T
(2) 72 283.14 T
(set f [open whiteboard-clients r]) 108 283.14 T
(3) 72 272.14 T
(dp_host -) 108 272.14 T
(4) 72 261.14 T
(while {[get $f host] != -1} {) 108 261.14 T
(5) 72 250.14 T
(dp_host +$host) 144 250.14 T
(6) 72 239.14 T
(}) 108 239.14 T
(7) 72 228.14 T
(close $f) 108 228.14 T
(8) 72 217.14 T
(9) 72 206.14 T
(# The only allowed commands are Subscribe and Publish) 108 206.14 T
(10) 72 195.14 T
(proc WhiteboardCmdCheck {cmd args} {) 108 195.14 T
(11) 72 184.14 T
(case $cmd in {) 144 184.14 T
(12) 72 173.14 T
(Subscribe return) 180 173.14 T
(13) 72 162.14 T
(Publish return) 180 162.14 T
(14) 72 151.14 T
(}) 144 151.14 T
(15) 72 140.14 T
(return -code break;) 144 140.14 T
(16) 72 129.14 T
(}) 108 129.14 T
(17) 72 118.14 T
(18) 72 107.14 T
(dp_MakeRPCServer 4545 dp_CheckHost WhiteboardCmdCheck) 108 107.14 T
1 12 Q
(Figure 8: Extra Commands for Secure Tcl-DP Shared Whiteboard Serv) 130.29 87.14 T
(er) 472.39 87.14 T
73.5 306.48 538.5 306.48 2 L
1 H
2 Z
N
72 72 540 720 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "17" 18
%%Page: "16" 19
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(A% proc CheckConnection {file addr} {) 108 713.33 T
(if {[string match $addr 128.32.134.*] != 1]} {) 144 701.33 T
(error \322Host not authorized\323) 162 689.33 T
(}) 144 677.33 T
(}) 126 665.33 T
(A% dp_MakeRPCServer 4545 CheckConnection) 108 653.33 T
1 12 Q
1.83 (The default login procedure for Tcl-DP is) 72 626 P
0 F
4.4 (dp_CheckHost) 287.79 626 P
1 F
1.83 (, which provides a simple access) 374.19 626 P
0.42 (control list mechanism, similar to) 72 612 P
0 F
1.01 (xhost) 238.12 612 P
1 F
0.42 ( in the X window system, for limiting connections to a) 274.12 612 P
1.78 (set of IP host addresses. The access control list is modified by the) 72 598 P
0 F
4.26 (dp_host) 413.05 598 P
1 F
1.78 ( command. For) 463.45 598 P
-0.54 (example, the following Tcl-DP commands allow connections from machines in the) 72 584 P
0 F
-1.3 (128.32.134) 468 584 P
1 F
(subnet except) 72 570 T
0 F
(128.32.134.117) 140.65 570 T
1 F
(, or from the machine named) 241.45 570 T
0 F
(mayo.sandwich.com) 383.09 570 T
1 F
(.) 505.49 570 T
0 10 Q
(A% dp_host -) 108 545.33 T
(A% dp_host +128.32.134.*) 108 533.33 T
(A% dp_host -128.32.134.117) 108 521.33 T
(A% dp_host +mayo.sandwich.com) 108 509.33 T
(A% dp_MakeRPCServer 4567) 108 497.33 T
1 12 Q
0.48 (By default, connections from any host are allowed \050equivalent to) 72 470 P
0 F
1.14 (dp_host +) 391.05 470 P
1 F
0.48 (\051. The) 456.99 470 P
0 F
1.14 (dp_host) 489.6 470 P
1 F
0.26 (command and its associated) 72 456 P
0 F
0.62 (loginFunc) 210.34 456 P
1 F
0.26 ( are implemented entirely in Tcl. They can be found in) 275.14 456 P
0.45 (the file) 72 442 P
0 F
1.07 ($dp_library/acl.tcl) 109.55 442 P
1 F
0.45 ( in the distribution. This code can be used as an example for) 246.35 442 P
1.15 (building more complex login security functions. For example, a server could maintain a list of) 72 428 P
0.84 (authorized users and passwords and require a client to explicitly login. Or, a server could use a) 72 414 P
(system such as PGP or Kerberos to authenticate clients.) 72 400 T
-0.04 (The login procedure can prevent rogue users from accessing a server, but even innocent users can) 72 372 P
0.09 (accidentally run commands with horrible side effects. Such mistakes are particularly disastrous if) 72 358 P
-0.12 (the server is running as root. For example, we all want to stop someone from accidentally running) 72 344 P
0 10 Q
(B% dp_RDO $server exec rm -rf /) 108 319.33 T
1 12 Q
-0.74 (To prevent such catastrophes,) 72 292 P
0 F
-1.77 (dp_MakeRPCServer) 214.68 292 P
1 F
-0.74 ( takes a second optional argument, called the) 329.88 292 P
3 F
0.54 (check command) 72 278 P
1 F
0.54 (, which checks each command from a) 149.5 278 P
0 F
1.29 (dp_RPC) 337.2 278 P
1 F
0.54 ( or) 380.4 278 P
0 F
1.29 (dp_RDO) 397.47 278 P
1 F
0.54 ( call before it is run.) 440.67 278 P
-0.25 (The return code from the check command specifies whether to disallow the command, to continue) 72 264 P
-0.08 (checking sub commands, or to allow the command to be executed with no further checking. If the) 72 250 P
0.15 (procedure returns a normal value, the command is allowed and no further checking is performed.) 72 236 P
1.1 (If the option) 72 222 P
0 F
2.64 (-code) 137.63 222 P
2.64 (break) 177.73 222 P
1 F
1.1 ( is used with the) 213.73 222 P
0 F
2.64 (return) 300.22 222 P
1 F
1.1 (, the command is disallowed. If) 343.42 222 P
0 F
2.64 (-code) 504 222 P
1.34 (continue) 72 208 P
1 F
0.56 ( is used, the command is allowed but nested commands are checked. Notice that the) 129.6 208 P
(nested checking allows commands such as) 72 194 T
0 10 Q
(B% dp_RPC $server eval rm -rf /) 108 169.33 T
1 12 Q
(to be caught.) 72 142 T
-0.4 (To illustrate the use of check commands, the following code defines a procedure that allows) 72 114 P
0 F
-0.97 (puts) 511.2 114 P
1 F
0.54 (to be run on standard error,) 72 100 P
0 F
1.29 (set) 208.85 100 P
1 F
0.54 ( to be run with one argument,) 230.45 100 P
0 F
1.29 (Subscribe) 378.86 100 P
1 F
0.54 ( to be run with now) 443.66 100 P
0.78 (further checking, and) 72 86 P
0 F
1.86 (eval) 179.63 86 P
1 F
0.78 (,) 208.43 86 P
0 F
1.86 (catch) 215.21 86 P
1 F
0.78 (, and) 251.21 86 P
0 F
1.86 (if) 279.09 86 P
1 F
0.78 ( to be run with embedded command checking. All) 293.49 86 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "16" 19
%%Page: "15" 20
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 72 540 720 C
72 72 540 718.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 74.02 540 685 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(1) 72 679 T
(#!/usr/local/bin/dpwish -f) 108 679 T
5 F
(2) 72 668 T
(puts \322Enter hostname of server:\323) 108 668 T
(3) 72 657 T
(gets stdin host) 108 657 T
(4) 72 646 T
(set server [dp_MakeRPCClient $host 4544]) 108 646 T
(5) 72 635 T
(dp_RDO $server Subscribe) 108 635 T
(6) 72 624 T
(proc DoCmd {args} {) 108 624 T
(7) 72 613 T
(    global server) 108 613 T
(8) 72 602 T
(    eval dp_RDO $server Publish $args) 108 602 T
(9) 72 591 T
(}) 108 591 T
0 F
(10) 72 580 T
(wm grid . 1 1 1 1) 108 580 T
(11) 72 569 T
(12) 72 558 T
(# Create menu bar:) 108 558 T
(13) 72 547 T
(frame .menubar -relief ridge) 108 547 T
(14) 72 536 T
(menubutton .menubar.file -text \322File\323 -menu .menubar.file.menu) 108 536 T
(15) 72 525 T
(pack .menubar.file -side left) 108 525 T
(16) 72 514 T
(menubutton .menubar.object -text \322Objects\323 -menu .menubar.object.menu) 108 514 T
(17) 72 503 T
(pack .menubar.object -side left) 108 503 T
(18) 72 492 T
(pack .menubar -side top -fill both) 108 492 T
(19) 72 481 T
(menu .menubar.file.menu) 108 481 T
(20) 72 470 T
(.menubar.file.menu add command -label \322Exit\323  -command exit) 108 470 T
(21) 72 459 T
(menu .menubar.object.menu) 108 459 T
(22) 72 448 T
(.menubar.object.menu add command -label \322Clear\323 -command \322) 108 448 T
5 F
(DoCmd) 421.2 448 T
0 F
( .c delete all\323) 448.2 448 T
(23) 72 437 T
(.menubar.object.menu add command -label \322Circle\323 -command \322) 108 437 T
5 F
(DoCmd) 426.6 437 T
0 F
( CreateCircle\323) 453.6 437 T
(24) 72 426 T
(25) 72 415 T
(# Create canvas, procs, bindings) 108 415 T
(26) 72 404 T
(canvas .c -background green) 108 404 T
(27) 72 393 T
(pack .c -fill both) 108 393 T
(28) 72 382 T
(29) 72 371 T
(proc CreateRect {x y} {) 108 371 T
(30) 72 360 T
5 F
(DoCmd) 144 360 T
0 F
( .c create rectangle $x $y $x $y -width 4 -outline white) 171 360 T
(31) 72 349 T
(}) 108 349 T
(32) 72 338 T
(proc CreateCircle {} {) 108 338 T
(33) 72 327 T
(set i [.c create oval 150 150 170 170 -fill skyblue]) 144 327 T
(34) 72 316 T
(.c bind $i <Any-Enter> \322) 144 316 T
5 F
(DoCmd) 273.6 316 T
0 F
( .c itemconfig $i -fill red\323) 300.6 316 T
(35) 72 305 T
(.c bind $i <Any-Leave> \322) 144 305 T
5 F
(DoCmd) 273.6 305 T
0 F
( .c itemconfig $i -fill SkyBlue2\323) 300.6 305 T
(36) 72 294 T
(.c bind $i <2> \322) 144 294 T
5 F
(DoCmd) 230.4 294 T
0 F
( plotDown .c $i %x %y\323) 257.4 294 T
(37) 72 283 T
(.c bind $i <B2-Motion> \322) 144 283 T
5 F
(DoCmd) 273.6 283 T
0 F
( plotMove .c $i %x %y\323) 300.6 283 T
(38) 72 272 T
(}) 108 272 T
(39) 72 261 T
(proc Clear {} {) 108 261 T
5 F
(DoCmd) 189 261 T
0 F
( .c delete all}) 216 261 T
(40) 72 250 T
(proc plotDown {w item x y} {) 108 250 T
(41) 72 239 T
(global plot) 144 239 T
(42) 72 228 T
($w raise $item) 144 228 T
(43) 72 217 T
(set plot\050lastX\051 $x) 144 217 T
(44) 72 206 T
(set plot\050lastY\051 $y) 144 206 T
(45) 72 195 T
(}) 108 195 T
(46) 72 184 T
(proc plotMove {w item x y} {) 108 184 T
(47) 72 173 T
(global plot) 144 173 T
(48) 72 162 T
($w move $item [expr $x-$plot\050lastX\051] [expr $y-$plot\050lastY\051]) 144 162 T
(49) 72 151 T
(set plot\050lastX\051 $x) 144 151 T
(50) 72 140 T
(set plot\050lastY\051 $y) 144 140 T
(51) 72 129 T
(}) 108 129 T
(52) 72 118 T
(53) 72 107 T
(bind .c <B1-Motion> {CreateRect %x %y}) 108 107 T
1 12 Q
(Figure 7: Tcl-DP Shared Whiteboard Client) 200.84 87 T
72 72 540 720 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "15" 20
%%Page: "14" 21
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
0 X
0 0 0 1 0 0 0 K
0.49 (connect the client to the server. The) 72 712 P
0 F
1.18 (DoCmd) 250.07 712 P
1 F
0.49 ( procedure defined in lines 6-9 uses) 286.07 712 P
0 F
1.18 (dp_RDO) 463.15 712 P
1 F
0.49 ( to call) 506.35 712 P
0 F
2.26 (Publish) 72 698 P
1 F
0.94 ( in the server, which sends whiteboard commands to the clients. The) 122.4 698 P
0 F
2.26 (CreateRect) 465 698 P
1 F
0.94 (,) 537 698 P
0 F
(CreateCircle) 72 684 T
1 F
(, and) 158.4 684 T
0 F
(Clear) 184.73 684 T
1 F
( routines use) 220.73 684 T
0 F
(DoCmd) 284.39 684 T
1 F
(.) 320.39 684 T
103.34 656.8 72 656.8 2 L
V
0.6 H
0 Z
N
4 F
(Secur) 72 658 T
115.52 656.8 103.52 656.8 2 L
V
N
(ity) 103.52 658 T
1 F
-0.38 (One problem with this server is that any client can connect, and a connected client can execute any) 72 630 P
(command. Tcl-DP uses two mechanisms to handle these two different security holes.) 72 616 T
0.65 (The first level of defense Tcl-DP provides is an optional \322login\323 procedure that can be supplied) 72 588 P
2.63 (with the) 72 574 P
0 F
6.31 (dp_MakeRPCServer) 119.26 574 P
1 F
2.63 ( command,. This procedure allow a server to specify a Tcl) 234.46 574 P
0.03 (procedure that will be executed when a client connects to the server. The procedure is called with) 72 560 P
2.54 (the file handle and IP address of the new client \050e.g.,) 72 546 P
0 F
6.1 (file4) 355.25 546 P
1 F
2.54 ( and) 391.25 546 P
0 F
6.1 (128.32.133.117) 419.67 546 P
1 F
2.54 (\051 as) 520.47 546 P
(arguments. For example, the following server logs all connection requests to a file.) 72 532 T
0 10 Q
(A% set logFile [open /tmp/connect.log w]) 108 507.33 T
(A% proc LogConnection {file addr} {) 108 495.33 T
(global logFile) 144 483.33 T
(puts $logFile \322Connection accepted from $addr on $file\323) 144 471.33 T
(}) 126 459.33 T
(A% dp_MakeRPCServer 4545 LogConnection) 108 447.33 T
1 12 Q
0.84 (The login procedure can be used to prevent illegal connections. If the connection is determined) 72 420 P
0.27 (illegal, the login procedure should return an error. For example, the following server only allows) 72 406 P
(connections from hosts in the) 72 392 T
0 F
(128.32.134) 216.32 392 T
1 F
( subnet.) 288.32 392 T
72 72 540 720 C
72 72 540 346.17 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
72 74.5 540 331.83 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(1) 72 325.83 T
(#!/usr/local/bin/dpwish -f) 108 325.83 T
(2) 72 314.83 T
(dp_MakeRPCServer 4544) 108 314.83 T
(3) 72 303.83 T
(4) 72 292.83 T
(set clients {}) 108 292.83 T
(5) 72 281.83 T
(set log {}) 108 281.83 T
(6) 72 270.83 T
(7) 72 259.83 T
(proc Subscribe {} {) 108 259.83 T
(8) 72 248.83 T
(    global dp_rpcFile clients log) 108 248.83 T
(9) 72 237.83 T
(    lappend clients $dp_rpcFile) 108 237.83 T
(10) 72 226.83 T
(    foreach cmd $log {) 108 226.83 T
(11) 72 215.83 T
(eval dp_RDO $dp_rpcFile $cmd) 144 215.83 T
(12) 72 204.83 T
(    }) 108 204.83 T
(13) 72 193.83 T
(}) 108 193.83 T
(14) 72 182.83 T
(15) 72 171.83 T
(proc Publish {args} {) 108 171.83 T
(16) 72 160.83 T
(    global clients log) 108 160.83 T
(17) 72 149.83 T
(    lappend log $args) 108 149.83 T
(18) 72 138.83 T
(    foreach i $clients {) 108 138.83 T
(19) 72 127.83 T
(eval \322dp_RDO $i $args\323) 144 127.83 T
(20) 72 116.83 T
(    }) 108 116.83 T
(21) 72 105.83 T
(}) 108 105.83 T
1 12 Q
(Figure 6: Tcl-DP Shared Whiteboard Serv) 199.94 85.83 T
(er) 402.73 85.83 T
73.5 339.08 538.5 339.08 2 L
1 H
2 Z
N
72 72 540 720 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "14" 21
%%Page: "13" 22
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
0 X
0 0 0 1 0 0 0 K
0.57 (to the whiteboard by executing) 72 184.17 P
0 F
1.37 (dp_MakeRPCClient) 226.51 184.17 P
1 F
0.57 ( and calling the) 341.71 184.17 P
0 F
1.37 (Subscribe) 420.65 184.17 P
1 F
0.57 ( procedure.) 485.45 184.17 P
0.27 (The server maintains a list of all clients connected in the global variable) 72 170.17 P
0 F
0.65 (clients) 423.8 170.17 P
1 F
0.27 ( and a history) 474.2 170.17 P
2.85 (of all whiteboard commands in the global variable) 72 156.17 P
0 F
6.85 (log) 339.46 156.17 P
1 F
2.85 (. When a new client is added, the) 361.06 156.17 P
0.22 (commands in the) 72 142.17 P
0 F
0.53 (log) 157.66 142.17 P
1 F
0.22 ( are sent to the new client so that it\325s display is brought up to date with the) 179.26 142.17 P
-0.17 (other clients. The command) 72 128.17 P
0 F
-0.4 (Publish) 208.32 128.17 P
1 F
-0.17 ( is called when a client executes a whiteboard command. It) 258.72 128.17 P
(writes the command to the) 72 114.17 T
0 F
(log) 202.32 114.17 T
1 F
( and broadcasts the command to all the clients.) 223.92 114.17 T
1.5 (The modified client code is shown in figure 7, with the modified code in boldface. Lines 2-5) 72 86.17 P
72 72 540 720 C
72 192.17 540 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
75.06 192.72 543.06 718.05 R
7 X
0 0 0 1 0 0 0 K
V
0 9 Q
0 X
(1) 75.06 712.05 T
(#!/usr/local/bin/wish -f) 111.06 712.05 T
(2) 75.06 701.05 T
(wm grid . 1 1 1 1) 111.06 701.05 T
(3) 75.06 690.05 T
(4) 75.06 679.05 T
(# Create menu bar:) 111.06 679.05 T
(5) 75.06 668.05 T
(frame .menubar -relief ridge) 111.06 668.05 T
(6) 75.06 657.05 T
(menubutton .menubar.file -text \322File\323 -menu .menubar.file.menu) 111.06 657.05 T
(7) 75.06 646.05 T
(pack .menubar.file -side left) 111.06 646.05 T
(8) 75.06 635.05 T
(menubutton .menubar.object -text \322Objects\323 -menu .menubar.object.menu) 111.06 635.05 T
(9) 75.06 624.05 T
(pack .menubar.object -side left) 111.06 624.05 T
(10) 75.06 613.05 T
(pack .menubar -side top -fill both) 111.06 613.05 T
(11) 75.06 602.05 T
(menu .menubar.file.menu) 111.06 602.05 T
(12) 75.06 591.05 T
(.menubar.file.menu add command -label \322Exit\323  -command exit) 111.06 591.05 T
(13) 75.06 580.05 T
(menu .menubar.object.menu) 111.06 580.05 T
(14) 75.06 569.05 T
(.menubar.object.menu add command -label \322Clear\323 -command \322.c delete all\323) 111.06 569.05 T
(15) 75.06 558.05 T
(.menubar.object.menu add command -label \322Circle\323 -command \322CreateCircle\323) 111.06 558.05 T
(16) 75.06 547.05 T
(17) 75.06 536.05 T
(# Create canvas, procs, bindings) 111.06 536.05 T
(18) 75.06 525.05 T
(canvas .c -background green) 111.06 525.05 T
(19) 75.06 514.05 T
(pack .c -fill both) 111.06 514.05 T
(20) 75.06 503.05 T
(21) 75.06 492.05 T
(proc CreateRect {x y} {) 111.06 492.05 T
(22) 75.06 481.05 T
(    .c create rectangle $x $y $x $y -width 4 -outline white) 111.06 481.05 T
(23) 75.06 470.05 T
(}) 111.06 470.05 T
(24) 75.06 459.05 T
(proc CreateCircle {} {) 111.06 459.05 T
(25) 75.06 448.05 T
(    set i [.c create oval 150 150 170 170 -fill skyblue]) 111.06 448.05 T
(26) 75.06 437.05 T
(    .c bind $i <Any-Enter> \322.c itemconfig $i -fill red\323) 111.06 437.05 T
(27) 75.06 426.05 T
(    .c bind $i <Any-Leave> \322.c itemconfig $i -fill SkyBlue2\323) 111.06 426.05 T
(28) 75.06 415.05 T
(    .c bind $i <2> \322PlotDown .c $i %x %y\323) 111.06 415.05 T
(29) 75.06 404.05 T
(    .c bind $i <B2-Motion> \322PlotMove .c $i %x %y\323) 111.06 404.05 T
(30) 75.06 393.05 T
(}) 111.06 393.05 T
(31) 75.06 382.05 T
(proc Clear {} {.c delete all}) 111.06 382.05 T
(32) 75.06 371.05 T
(proc PlotDown {w item x y} {) 111.06 371.05 T
(33) 75.06 360.05 T
(    global plot) 111.06 360.05 T
(34) 75.06 349.05 T
(    $w raise $item) 111.06 349.05 T
(35) 75.06 338.05 T
(    set plot\050lastX\051 $x) 111.06 338.05 T
(36) 75.06 327.05 T
(    set plot\050lastY\051 $y) 111.06 327.05 T
(37) 75.06 316.05 T
(}) 111.06 316.05 T
(38) 75.06 305.05 T
(proc PlotMove {w item x y} {) 111.06 305.05 T
(39) 75.06 294.05 T
(    global plot) 111.06 294.05 T
(40) 75.06 283.05 T
(    $w move $item [expr $x-$plot\050lastX\051] [expr $y-$plot\050lastY\051]) 111.06 283.05 T
(41) 75.06 272.05 T
(    set plot\050lastX\051 $x) 111.06 272.05 T
(42) 75.06 261.05 T
(    set plot\050lastY\051 $y) 111.06 261.05 T
(43) 75.06 250.05 T
(}) 111.06 250.05 T
(44) 75.06 239.05 T
(45) 75.06 228.05 T
(bind .c <B1-Motion> {CreateRect %x %y}) 111.06 228.05 T
1 12 Q
(Figure 4: A Simple Tcl/Tk Whiteboard) 215.23 208.05 T
73.5 199.08 538.5 199.08 2 L
1 H
2 Z
N
72 72 540 720 C
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "13" 22
%%Page: "12" 23
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
0 X
0 0 0 1 0 0 0 K
1.51 (to a new position by pressing the middle button down while the mouse is over the circle and) 72 580.67 P
(moving the mouse. To clear the whiteboard, select the) 72 566.67 T
0 F
(Clear) 334.96 566.67 T
1 F
( menu item in the) 370.96 566.67 T
0 F
(Object) 457.96 566.67 T
1 F
( menu.) 501.16 566.67 T
1.34 (This code can be adapted to a shared whiteboard by broadcasting every change to the canvas,) 72 538.67 P
0.37 (whether through bindings or procedure calls, to the other whiteboards. To handle the broadcasts,) 72 524.67 P
0.32 (we will use a centralized server process as a reflector. Each client connects and subscribes to the) 72 510.67 P
-0.14 (whiteboard. The clients and server form a \322star\323 with the server at the center as shown in figure 5.) 72 496.67 P
-0.33 (When a client wants to execute a whiteboard command, it sends the command to the server, which) 72 482.67 P
(broadcasts the command to all the clients, where they are executed.) 72 468.67 T
0.16 (The Tcl-DP code to create the server is shown in figure 6. The call to) 72 440.67 P
0 F
0.38 (dp_MakeRPCServer) 409.64 440.67 P
1 F
0.16 ( on) 524.84 440.67 P
0.03 (line 2 initializes the server and listens for connections from clients on port 4544. A client connect) 72 426.67 P
71.67 72 540.33 421.83 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
71.83 74.83 538.5 88.17 R
7 X
0 0 0 1 0 0 0 K
V
1 12 Q
0 X
(Figure 3: A simple whiteboard) 231.51 80.17 T
%%BeginBinary:  16586    
364 307 364 307 0 125 92.92
/red <
9677072414507A5D87738727D62A4E4D654A7B5A9D6DA957BF2D3767536A0D44
FF34803ACB3059631A477060B4377040DC43E1920090CCFF3D8BC6B27E8EC3A3
ECD9613EC472FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBF
BFBF7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F3F3F3F3F3F3F
3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F00000000000000000000000000
0000000000000000000082D86AF8B170BA76C47CCE82D888E324543C009960E0
A0D099FF7386DF73BF7F998FEF00FF6BFAB27BFFCD99FFFFB0B08FEE99FF00FF
> store
/green <
9677072414507A5D877346278C2A144D284A3C5A5A6D6457782D0067536A0D44
D534803A82301E631A4732606E377040DC0A96500090CCD03D99D5C0C08EC3A3
ECD98757D79F00000000000000000000000000FFFFFFBFBFBFBFBF7F7F7F7F7F
3F3F3F3F3F00000000FFFFFFFFBFFFBFBFBFBF7F7F7F7F7F3F3F3F3F3F000000
0000FFFFFFFFFFBFBFBFBFBF7F7F7F7F3F3F3F3F3F0000000000FFFFFFFFFFBF
BFBFBFBF7F7F7F7F7F3F3F3F3F3F0000000000FFFFFFFFFFBFBFBFBFBF7F7F7F
7F7F3F3F3F3F3F00000073BF6AF8B170BA76C47CCE82D888E36BFBB30000132C
202099FF7386DF86DF7F998FEF000086FFDF6EFFB768F4AE30B080D589E400FF
> store
/blue <
FFDA557764ACDDBBEDD6A17BF47F65A87DA595B8B8CEC4B4DC834DC7B0CA5D9D
198AE592E88671C36CA189BFD08ED299DC59FFAC4DF8CC0095B5E2DCEE8EC3A3
ECD9D98CFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBF7F3FFFBF7F3F00FFBF7F3F00
FFBF7F3F00FFBF7F3FFFBF7F3FBF00FF7F3F00FFBF7F3F00FFBF7F3F00FFBF7F
3F00FFBF7F3F00FFBF7F3F00FFBF3F00FFBF7F3F00FFBF7F3F00FFBF7F3F00FF
BF7F3F00FFBF7F3F00FFBF7F3F00FFBF7F3F00FFBF7F3F00FFBF7F3F00FFBF7F
3F00FFBF7F3F00BF7F3F82D86AF8B170BA76C47CCE82D888E3449E71990090FF
F09000007386DF99FF7F998FEFFF008FFFEE5FDE9E6FFFB960B06EB776C400FF
> store
 BEGINBITMAPCOLORc
5


FFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFE5


FFFEUEFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#9wJw9$
FEFFFEU&FEFEFFFF7#:UC#I#>#J+:$
FFFEFEFEFEFEFEFET(FFFFFFFEFFFFFEFFFFFFFFFEFE$J#J#
FFFEFFO"FFFFT@FEFF$>$C#:&8#8#8&8%;#J#
FEFFFEFEFEFEFEFEFEFEFFFEFEFEFEFEFEFEFEFFFEFEFEFEFEFEFEFET3FFFE7#="9"A%;%E'9%J$A$
FEFFFEFEFEFEFFFEFEFFFEFEFEFEFFFFFEFEFEFFFEFET$FEFEFEFEFFFF7#<";"C";":$:$<%9"J%@$
FFFEFEFEFFFFFFFEFEFEFEFFFEFFFFFFFFT'FFFFFFFFFFFEFE$J&J#
FFFEFFO%FFFFFEFEFET:FEFF$J"8"J'>#
FEFFFEO'FFFET+FEFEFEFEFEFEFFFE7#<";"C";";);%JR=$
FEFFFFFFFEFEFFFEFEFFFFFEFEFFFEFEFFFFT-FEFFFF7#="9"A%;%E'J$
FFFEFFFFFFFEFEFFFFFEFEFFFFFEFEFEFEFFT9FFFEFE$>$CP:#:#8#9#8%8#8#J#
FFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFT2FEFF$:uJu:#
FEFFFEFEU(FEFFFE7#9WJW9$
FEFFU&FEFFFF7#J#J$
FFFE>FFFFU$FFFEFE$J#
FFFEFFUDFEFF5
UIFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFE75
z$
FFFEUD41FFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#>s$J%9#;#F#J$
FFFEFE41FEFE9FEFEFEFEFEFEFEFEFEFET$FFFEFE$@'J'?#J#
FFFEFF414141414141;FEFE4141FEFE4141T6FEFF$D#;%G$8$:#8#8%9%8"8"8%J#
FEFFFEFEFEFEFEFEFEFEFE4141FEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFESKFFFE7#J'J%:08)J$
FEFF4FEFE4141FEFE;FE41FEFEFEFE4141FEFE41FEFE4141FEFE41414141FEFE4141FEFESJFEFFFF7#@$J"H#>%J$
FFFEFEFEFEH414141FE414141SJFFFEFE$@$?#J#E&J#
FFFEFF414141FEFEGFEFE4141FEFEFESKFEFF$J%J%E"8"J#
FEFFFE641414141E4141414141FESJFFFE7#J#F$8$9"A#;#;&J$
FEFF8FEFE41FEFEFEFE41FEFEFEFEFEFEFEFE4141SLFEFFFF7#J'G':%:.8+J$
FFFE441FEFEFEFE4141FEFEFEFE4141FEFE4141FEFEFEFE414141FEFEFEFE4141FEFE4141FEFEFEFE41SJFFFEFE$>#:&8%I%9&<%9%:#8%J#
FFFEFF41414141414141414141414141414141414141414141414141414141414141414141SKFEFF$J#
FEFFFEUDFFFE7#J$J$
FEFFO+FEFE41T6FEFFFF7#J#J$
FFFEO+4141T7FFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#8z8$
FFFEU@B7FFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#JPJ$
FFFEQ&R9FFFEFE$JPJ#
FFFEFFO T?FEFF$JPJPJ#
FEFFFEQ5O+PHFFFE7#JPJ"J$
FEFFO:Q+FFPGFEFFFF7#J$
FFFEUDFFFEFE$J&J#
FFFEFFQ&B7B7B7B7B7R9FEFF$J"JPJ#
FEFFFEO?FFO4R9FFFE7#J$
FEFFUDFEFFFF7#J"J$
FFFERJB7PGFFFEFE$J"J&J#
FFFEFFO:B7OHB7B7B7B7B7R*FEFF$JPJ#
FEFFFEQ5R*FFFE7#J$
FEFFUDFEFFFF7#J&J$
FFFEREB7B7B7B7B7PHFFFEFE$J&J&JPJ#
FFFEFFO;B7B7B7B7B7O4B7B7B7B7B7O:PHFEFF$JPJPJ#
FEFFFEO:O5R9FFFE7#J&J$
FEFFQ5B7B7B7B7B7R*FEFFFF7#J"JPJ$
FFFEMFFP5R*FFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J"J&J$
FEFFO$B75B7B7B7B7B7T%FEFFFF7#J"JPJP9UJ"J$
FFFELFF;;DFFR/FFFEFE$J#A#I"I"JPJ#
FFFEFFP1FFFFFFFFFFB7:Q9FEFF$J#J"J#
FEFFFEP*FFFFO-FFR*FFFE7#J"J#J#J$
FEFFO#B7O$FFFF6FFFFS"FEFFFF7#J"J"J"J$
FFFEP'FFO"B7HFFQ>FFFEFE$J&>R"P#JrJ"J#
FFFEFFLB7B7B7B7B7B7B7FFHB7O7FFQ?FEFF$JP8QJ"J">%>"J#<"J#
FEFFFEL4FF4FFB7B7B7B7B7O4FFFFB7Q9FFFE7#J#J#J">#J$
FEFFO#FFFFO(B7B7O@FFFFFFQ8FEFFFF7#J"J"J"J"J#A$J&J$
FFFEKFFO.B74B7?FF9FFFFFFFFFF6B7B7B7B7B7PHFFFEFE$J"J"J#
FFFEFFP+B7P#FFQ4FEFF$JwJ&J"G#J#
FEFFFEO/B7O!B7B7B7B7B7O+FFFFFFQ2FFFE7#J";rB&JPJ"A"J$
FEFFO"B7B7B7B7B7B7B7DO9B7FFQ1FEFFFF7#J&IPJ#J"<&@#J$
FFFEO#B7B7B7B7B7BFFFFO5FFB7B7B7B7B7FFFFQ/FFFEFE$J"J#J";#J#
FFFEFFO@FF?FFFFO=B7B7B7Q9FEFF$J&9%JrJ"J#
FEFFFEP&B7B7B7B7B7FFFFFFFFO!B7?B7Q8FFFE7#JRJR;PB"?#J$
FEFFP'O%B7B7B7Q6FEFFFF7#J"J&J$
FFFEP:B78B7B7B7B7B7R:FFFEFE$J&J#JPJ"=%J#
FFFEFFKB7B7B7B7B7O6B7B79FFFFFFFFFFFQ6FEFF$JPJ"J$JRJ#
FEFFFEK>B7BB7B7B7O9Q:FFFE7#J"J$JUJ$
FEFFO@FF?B7B7B7P,PGFEFFFF7#J"J"=$Jr;&J$
FFFEJFFO*B7B7B7B7O!B7B7B7B7B7B7R FFFEFE$J#JRG"I%J#
FFFEFFP/FFFFO"B7B7B7B7B7Q/FEFF$J"J">VJ"D%J#
FEFFFEOAFF4B7O0B7B7B7B7B7Q3FFFE7#JyJ$
FEFFQMB7Q7FEFFFF7#J"J"J$
FFFEP)B7P7B7Q"FFFEFE$J"J#J#
FFFEFFP*B7P7B7B7Q FEFF$J$J";"JrJ#
FEFFFEP+B7B7B7O%B7B7O*B7PGFFFE7#J#JyJ&@&J$
FEFFO@B7B7:B77B7B7B7B7B7B7B7B7B7B7R+FEFFFF7#J"J$
FFFEO@FFT#FFFEFE$J"J#
FFFEFFO:FFT)FEFF$J"J#
FEFFFEO!B7TBFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#J#
FFFEFFO?B7B7T#FEFF$J&J#
FEFFFEO:B7B7B7B7B7T%FFFE7#J$
FEFFUDFEFFFF7#J&J$
FFFEJB7B7B7B7B7TCFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#JrJ$
FEFFP)FES4FEFFFF7#J#r#J$
FFFEP'FEFE3CFEFES2FFFEFE$J$=$J#
FFFEFFP&FE3C3C3C3CFES1FEFF$J#A#J#
FEFFFEP%FE3C3CFES0FFFE7#J#C#J$
FEFFP$FE3C3CFES/FEFFFF7#J#E#J$
FFFEP#FE3C3CFES.FFFEFE$J#
FFFEFFUDFEFF$J#G#J#
FEFFFEP"FE3C3CFES-FFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$JrJ#
FEFFFERGFEPDFFFE7#J#r#J$
FEFFREFEFE3CFEFEPBFEFFFF7#J$=$J$
FFFERDFE3C3C3C3CFEPAFFFEFE$J#G#J#A#J#
FFFEFFP"B7FEFEB7P,FE3C3CFEP@FEFF$J#C#J#
FEFFFERBFE3C3CFEP?FFFE7#J#E#J#E#J$
FEFFP#B7FEFEB7P+FE3C3CFEP>FEFFFF7#J#C#J$
FFFEP$B7FEFEB7S/FFFEFE$J#A#J#G#J#
FFFEFFP%B7FEFEB7P,FE3C3CFEP=FEFF$J$=$J#
FEFFFEP&B7FEFEFEFEB7S1FFFE7#J#r#J$
FEFFP'B7B7FEB7B7S2FEFFFF7#JrJ$
FFFEP)B7S4FFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J#G#J$
FFFER@B7FEFEB7P=FFFEFE$J#
FFFEFFUDFEFF$J#E#J#
FEFFFERAB7FEFEB7P>FFFE7#J#C#J$
FEFFRBB7FEFEB7P?FEFFFF7#J#A#J$
FFFERCB7FEFEB7P@FFFEFE$J$=$J#
FFFEFFRDB7FEFEFEFEB7PAFEFF$J#r#J#
FEFFFEREB7B7FEB7B7PBFFFE7#JrJ$
FEFFRGB7PDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#J$
FFFEUDFFFEFE$J#
FFFEFFUDFEFF$J#
FEFFFEUDFFFE7#J$
FEFFUDFEFFFF7#8z8$
FFFEU@41FFFEFE$J#
FFFEFFUDFEFF5


UIFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFEFEFFFEFE#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#8#
FFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFEFFFE
ENDBITMAP
%%EndBinary
73.5 408.92 538.5 408.92 2 L
1 H
2 Z
N
0 0 612 792 C
72 72 540 720 C
77 588.67 535 720 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
338.46 677.83 339.17 674.94 328.39 675.36 337.76 680.72 4 Y
0.5 H
0 Z
0 X
0 0 0 1 0 0 0 K
N
338.46 677.83 339.17 674.94 328.39 675.36 337.76 680.72 4 Y
V
338.71 677.89 368.34 685.15 2 L
2 Z
N
7 X
90 450 24.17 15.55 306.67 668 G
0 Z
0 X
90 450 24.17 15.55 306.67 668 A
1 12 Q
(serv) 292.01 664.46 T
(er) 311.82 664.46 T
7 X
90 450 24.17 15.55 222.84 647.55 G
0 X
90 450 24.17 15.55 222.84 647.55 A
(client) 209.51 644.01 T
7 X
90 450 24.17 15.55 222.84 688.45 G
0 X
90 450 24.17 15.55 222.84 688.45 A
(client) 209.51 684.91 T
7 X
90 450 24.17 15.55 390.5 647.55 G
0 X
90 450 24.17 15.55 390.5 647.55 A
(client) 377.17 644.01 T
7 X
90 450 24.17 15.55 390.5 688.45 G
0 X
90 450 24.17 15.55 390.5 688.45 A
(client) 377.17 684.91 T
361.38 676.48 360.67 679.37 371.46 678.95 362.08 673.59 4 Y
N
361.38 676.48 360.67 679.37 371.46 678.95 362.08 673.59 4 Y
V
331.5 669.17 361.13 676.42 2 L
7 X
V
2 Z
0 X
N
(draw) 323.34 697.17 T
(request) 323.34 685.17 T
335.91 654.25 335.14 651.38 325.88 656.93 336.67 657.12 4 Y
0 Z
N
335.91 654.25 335.14 651.38 325.88 656.93 336.67 657.12 4 Y
V
336.15 654.18 365.56 646.32 2 L
7 X
V
2 Z
0 X
N
357.41 656.66 358.16 659.54 367.46 654.06 356.67 653.77 4 Y
0 Z
N
357.41 656.66 358.16 659.54 367.46 654.06 356.67 653.77 4 Y
V
330.28 663.67 357.17 656.72 2 L
7 X
V
2 Z
0 X
N
253.91 678.75 253.14 675.88 243.88 681.43 254.68 681.62 4 Y
0 Z
N
253.91 678.75 253.14 675.88 243.88 681.43 254.68 681.62 4 Y
V
254.15 678.68 283.56 670.82 2 L
7 X
V
2 Z
0 X
N
275.41 681.16 276.16 684.04 285.46 678.56 274.67 678.28 4 Y
0 Z
N
275.41 681.16 276.16 684.04 285.46 678.56 274.67 678.28 4 Y
V
248.28 688.17 275.17 681.22 2 L
7 X
V
2 Z
0 X
N
272.04 662.8 271.34 665.69 282.12 665.27 272.75 659.91 4 Y
0 Z
N
272.04 662.8 271.34 665.69 282.12 665.27 272.75 659.91 4 Y
V
242.17 655.48 271.8 662.74 2 L
7 X
V
2 Z
0 X
N
257.13 652.18 257.84 649.29 247.05 649.72 256.42 655.07 4 Y
0 Z
N
257.13 652.18 257.84 649.29 247.05 649.72 256.42 655.07 4 Y
V
257.37 652.24 287 659.5 2 L
7 X
V
2 Z
0 X
N
(reflected) 263 643.33 T
(request) 263 631.33 T
77.5 597.83 535 615.33 R
7 X
V
0 X
(Figure 5: Architecture of the shared whiteboard e) 170.21 607.33 T
(xample) 406.97 607.33 T
72 72 540 720 C
0 0 612 792 C
73 598 538 598 2 L
1 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "12" 23
%%Page: "11" 24
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(B% proc Setup {} {) 108 713.33 T
(global server scode) 144 701.33 T
(dp_RDO $server -callback {set scode} Subscribe) 144 689.33 T
(dp_waitvariable scode) 144 677.33 T
(dp_RDO $server puts $scode) 144 665.33 T
(}) 126 653.33 T
(B% Setup) 108 641.33 T
1 12 Q
1.75 (D) 72 614 P
0 F
4.19 (p_waitvariable) 80.66 614 P
1 F
1.75 ( calls) 181.46 614 P
0 F
4.19 (Tk_DoOneEvent) 212.96 614 P
1 F
1.75 ( repeatedly until) 306.55 614 P
0 F
4.19 (scode) 392.79 614 P
1 F
1.75 ( changes value, which) 428.79 614 P
(happens when the server sends back the subscription identifier.) 72 600 T
1.01 (In addition to the) 72 572 P
0 F
2.41 (-callback) 161.36 572 P
1 F
1.01 ( option,) 226.16 572 P
0 F
2.41 (dp_RDO) 267.84 572 P
1 F
1.01 ( has an) 311.04 572 P
0 F
2.41 (-onerror) 350.39 572 P
1 F
1.01 ( option that specifies a Tcl) 407.98 572 P
0.27 (fragment that will be evaluated if the remote procedure call terminates with an error. This option) 72 558 P
0.37 (can be used, for example, to trap errors that occur in the remote execution of) 72 544 P
0 F
0.89 (dp_RDO) 447.83 544 P
1 F
0.37 (. To see) 491.03 544 P
0 F
0.89 (-) 532.8 544 P
(onerror) 72 530 T
1 F
( in action, try the following fragment:) 122.4 530 T
0 10 Q
(B% dp_RDO $server -onerror puts Greeting arg1 arg2) 108 505.33 T
1 12 Q
0.09 (Since the) 72 478 P
0 F
0.22 (Greeting) 119.51 478 P
1 F
0.09 ( procedure only takes one argument, this) 177.11 478 P
0 F
0.22 (dp_RDO) 375.71 478 P
1 F
0.09 ( call will trigger an error,) 418.91 478 P
(which will be printed on the screen using) 72 464 T
0 F
(puts) 272.64 464 T
1 F
(.) 301.44 464 T
0.22 (The final topic in this section describes how to close connections. Since the connection identifier) 72 436 P
0.47 (is an ordinary file descriptor, the Tcl) 72 422 P
0 F
1.13 (close) 253.94 422 P
1 F
0.47 ( command can be used to terminate the connection.) 289.94 422 P
(For example, the command) 72 408 T
0 10 Q
(B% close $server) 108 383.33 T
1 12 Q
(shuts down the connection between B and A.) 72 356 T
190.73 328.8 72 328.8 2 L
V
0.6 H
0 Z
N
4 F
(An Extended Example) 72 330 T
1 F
0.12 (To show how the functions described in this section are used in an application, we will show you) 72 302 P
-0.26 (how to build a simple distributed whiteboard. Before showing how this application works across a) 72 288 P
(network, it is simplest to learn how the non-distributed version works.) 72 274 T
2.58 (The Tk code for a stand-alone whiteboard, which can be found in the file) 72 246 P
0 F
6.18 (wb.tcl) 461.65 246 P
1 F
2.58 ( in the) 504.85 246 P
0 F
2.81 (examples/whiteboard) 72 232 P
1 F
1.17 ( subdirectory in the Tcl-DP distribution, is shown in figure 4. This) 208.8 232 P
0.76 (code creates a canvas and a menu bar, as shown in figure 3. The functions) 72 218 P
0 F
1.83 (CreateRect) 441.65 218 P
1 F
0.76 (and) 522.67 218 P
0 F
3.47 (CreateCircle) 72 204 P
1 F
1.45 ( create rectangles and circles on the canvas. The function) 158.4 204 P
0 F
3.47 (Clear) 449.78 204 P
1 F
1.45 ( deletes all) 485.78 204 P
2.42 (objects on the canvas. The functions) 72 190 P
0 F
5.82 (PlotDown) 264.18 190 P
1 F
2.42 ( and) 321.79 190 P
0 F
5.82 (PlotMove) 349.96 190 P
1 F
2.42 ( work together to move a) 407.56 190 P
(previously created circle.) 72 176 T
0.88 (The whiteboard is used as follows. To create rectangles, press the left button down in the main) 72 148 P
-0.39 (window and move the mouse while holding the button down. A trail of small, 4 by 4 pixel, squares) 72 134 P
0.38 (will follow the mouse on the canvas. Internally, this response is implemented by binding \050at line) 72 120 P
(51\051 the) 72 106 T
0 F
(Button-1-motion) 108.66 106 T
1 F
( event to call the) 216.66 106 T
0 F
(CreateRect) 298.98 106 T
1 F
( function.) 370.98 106 T
0.28 (To create a circle, select the) 72 78 P
0 F
0.66 (Circle) 210.6 78 P
1 F
0.28 ( menu item in the) 253.8 78 P
0 F
0.66 (Object) 342.18 78 P
1 F
0.28 ( menu. You can move the circle) 385.38 78 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "11" 24
%%Page: "10" 25
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
0 X
0 0 0 1 0 0 0 K
(procedure using) 72 712 T
0 F
(dp_RDO) 151.98 712 T
1 F
( and sets the local variable) 195.18 712 T
0 F
(scode) 325.15 712 T
1 F
( to the subscription code:) 361.15 712 T
0 10 Q
(B% dp_RDO $server -callback {set scode} Subscribe) 108 687.33 T
(B% CreateUserInterface) 108 675.33 T
1 12 Q
1.57 (When) 72 648 P
0 F
3.77 (Subscribe) 105.23 648 P
1 F
1.57 ( completes, the Tcl fragment) 170.03 648 P
0 F
3.77 (set) 318.52 648 P
3.77 (scode) 344.69 648 P
1 F
1.57 ( is evaluated in B with the new) 380.69 648 P
(identifier appended.) 72 634 T
-0.67 (One problem that can arise using) 72 606 P
0 F
-1.61 (-callback) 229.28 606 P
1 F
-0.67 ( is synchronizing the client and server. For example,) 294.08 606 P
1.25 (suppose the client, after creating the user interface, must execute the) 72 592 P
0 F
2.99 (Ready) 416.62 592 P
1 F
1.25 ( procedure on the) 452.62 592 P
(server which takes the identifier returned from the) 72 578 T
0 F
(Subscribe) 315.94 578 T
1 F
( function as an argument.) 380.74 578 T
0 10 Q
(B% proc Setup {} {) 108 553.33 T
(global server scode) 144 541.33 T
(dp_RDO $server -callback {set scode} Subscribe) 144 529.33 T
(dp_RDO $server puts $scode) 144 517.33 T
(}) 126 505.33 T
(B% Setup) 108 493.33 T
(can\325t read \322scode\323: no such variable) 108 481.33 T
1 12 Q
-0.44 (This code fails on the second) 72 454 P
0 F
-1.05 (dp_RDO) 212.02 454 P
1 F
-0.44 ( because the client has not processed the callback of the first) 255.22 454 P
0 F
1.37 (dp_RDO) 72 440 P
1 F
0.57 (, which sets the) 115.2 440 P
0 F
1.37 (scode) 194.48 440 P
1 F
0.57 ( variable. This problem is called a client/server) 230.48 440 P
3 F
0.57 (synchronization) 463.33 440 P
0.29 (problem) 72 426 P
1 F
0.29 (. To understand the solution to the synchronization problem, we must take a brief detour) 112 426 P
(into the implementation of Tcl-DP.) 72 412 T
1.22 (Tcl-DP uses TCP sockets for) 72 384 P
0 F
2.91 (dp_RDO) 220.39 384 P
1 F
1.22 ( and) 263.59 384 P
0 F
2.91 (dp_RPC) 289.35 384 P
1 F
1.22 (. In Unix, sockets are represented by files) 332.55 384 P
0.05 (which are) 72 370 P
3 F
0.05 (readable) 122.08 370 P
1 F
0.05 ( when the socket has data waiting to be read. Tk contains a mechanism, called) 164.74 370 P
3 F
0.81 (file handlers) 72 356 P
1 F
0.81 (, that automatically invokes a C callback function whenever a file is) 133.15 356 P
3 F
0.81 (readable) 471.86 356 P
1 F
0.81 (. The) 514.53 356 P
-0.32 (callback is issued from the) 72 342 P
0 F
-0.78 (Tk_DoOneEvent) 201.36 342 P
1 F
-0.32 ( function, which invokes callbacks in response to X) 294.96 342 P
(window events, file events, and timer events.) 72 328 T
1.72 (Tcl-DP uses file handlers and TCP sockets to implement the RPC mechanisms. In particular,) 72 300 P
0 F
2.78 (dp_MakeRPCClient) 72 286 P
1 F
1.16 ( creates a socket and a file handler on the socket that reads strings that) 187.2 286 P
-0.43 (come in on the socket, evaluates them as Tcl commands, and returns the result. But the file handler) 72 272 P
(associated with a Tcl-DP socket is not invoked until the client calls) 72 258 T
0 F
(Tk_DoOneEvent) 397.31 258 T
1 F
(.) 490.91 258 T
-0.25 (The implementation of) 72 230 P
0 F
-0.59 (-onerror) 184.25 230 P
1 F
-0.25 ( and) 241.85 230 P
0 F
-0.59 (-callback) 264.68 230 P
1 F
-0.25 ( use) 329.48 230 P
0 F
-0.59 (dp_RDO) 350.98 230 P
1 F
-0.25 (. In the example above, A uses) 394.18 230 P
0 F
-0.51 (dp_RDO) 72 216 P
1 F
-0.21 ( to set) 115.2 216 P
0 F
-0.51 (scode) 146.23 216 P
1 F
-0.21 ( in B. Since the response by A is passed to B using) 182.23 216 P
0 F
-0.51 (dp_RDO) 426.1 216 P
1 F
-0.21 (,) 469.3 216 P
0 F
-0.51 (scode) 475.09 216 P
1 F
-0.21 ( is not) 511.09 216 P
0.01 (set until the client calls) 72 202 P
0 F
0.02 (Tk_DoOneEvent) 185.7 202 P
1 F
0.01 (. So, to solve the synchronization problem, we have to) 279.3 202 P
(call) 72 188 T
0 F
(Tk_DoOneEvent) 92.33 188 T
1 F
( until the server\325s response is received.) 185.93 188 T
8.07 (Tcl-DP provides two Tcl commands to call) 72 160 P
0 F
19.37 (Tk_DoOneEvent) 338.8 160 P
1 F
8.07 (:) 432.4 160 P
0 F
19.37 (dp_update) 446.8 160 P
1 F
8.07 ( and) 511.6 160 P
0 F
-0.81 (dp_waitvariable) 72 146 P
1 F
-0.34 (.) 180 146 P
0 F
-0.81 (Dp_update) 185.66 146 P
1 F
-0.34 ( calls) 250.46 146 P
0 F
-0.81 (Tk_DoOneEvent) 277.78 146 P
1 F
-0.34 ( repeatedly until no X, timer, or file) 371.38 146 P
2.29 (events are pending. Dp_w) 72 132 P
0 F
5.49 (aitvariable) 204.17 132 P
1 F
2.29 ( calls) 283.37 132 P
0 F
5.49 (Tk_DoOneEvent) 315.94 132 P
1 F
2.29 ( until a specified variable) 409.54 132 P
-0.3 (changes value. The solution to the synchronization problem above can use) 72 118 P
0 F
-0.71 (dp_waitvariable) 428.66 118 P
1 F
-0.3 (:) 536.66 118 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "10" 25
%%Page: "9" 26
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
0 X
0 0 0 1 0 0 0 K
-0.23 (values. The) 72 712 P
0 F
-0.55 (Subscribe) 129.86 712 P
1 F
-0.23 (procedure given above is an example of such a procedure. The purpose) 201.3 712 P
0.05 (in calling) 72 698 P
0 F
0.11 (Subscribe) 120.09 698 P
1 F
0.05 ( is not to get a return value, in fact, it does not return a value, but rather to) 184.89 698 P
-0.35 (modify a global variable in the server. Whenever a procedure is called that does not return a useful) 72 684 P
2.52 (value, it can be called with) 72 670 P
0 F
6.05 (dp_RDO) 218.77 670 P
1 F
2.52 ( instead of) 261.98 670 P
0 F
6.05 (dp_RPC) 322.54 670 P
1 F
2.52 (. For example, the following calls) 365.73 670 P
0 F
(Subscribe) 72 656 T
1 F
( procedure using) 136.8 656 T
0 F
(dp_RDO) 219.78 656 T
1 F
(:) 262.98 656 T
0 10 Q
(B% dp_RDO $server Subscribe) 108 631.33 T
1 12 Q
-0.25 (Besides preventing deadlock,) 72 604 P
0 F
-0.61 (dp_RDO) 215.21 604 P
1 F
-0.25 ( is also more efficient than) 258.41 604 P
0 F
-0.61 (dp_RPC) 387.54 604 P
1 F
-0.25 (. The difference can be) 430.73 604 P
3.07 (dramatic. Depending on the distance to the remote site, the load on the network, and the) 72 590 P
-0.38 (responsiveness of the server,) 72 576 P
0 F
-0.92 (dp_RPC) 211.43 576 P
1 F
-0.38 ( can take anywhere from 2 to 200 milliseconds \050or more!\051 to) 254.62 576 P
1.46 (complete. In contrast,) 72 562 P
0 F
3.51 (dp_RDO) 183.36 562 P
1 F
1.46 ( typically returns within a fraction of a millisecond. Moreover,) 226.56 562 P
0 F
2.29 (dp_RDO) 72 548 P
1 F
0.95 ( reduces load on the network, client, and server, since the server does not send back a) 115.2 548 P
-0.18 (response, the client does not process a response, and the network does not transport the response.) 72 534 P
1 9.6 Q
-0.14 (3) 535.2 538.8 P
1 12 Q
2.1 (Another consequence of using) 72 506 P
0 F
5.05 (dp_RDO) 229.04 506 P
1 F
2.1 ( is that the client and server can run in parallel. For) 272.24 506 P
1.09 (example, in its initialization code, a typical client of our server will create a user interface and) 72 492 P
(subscribe to the server database. A typical calling sequence might look like:) 72 478 T
0 10 Q
(B% dp_RPC $server Subscribe) 108 453.33 T
(B% CreateUserInterface) 108 441.33 T
1 12 Q
1.38 (By replacing the) 72 414 P
0 F
3.3 (dp_RPC) 158.45 414 P
1 F
1.38 ( call in the second line with) 201.65 414 P
0 F
3.3 (dp_RDO) 346.26 414 P
1 F
1.38 (, the client can create the user) 389.46 414 P
(interface while the server executes the) 72 400 T
0 F
(Subscribe) 258.6 400 T
1 F
( code.) 323.4 400 T
0 F
1.66 (Dp_RDO) 72 372 P
1 F
0.69 ( has two important options:) 115.2 372 P
0 F
1.66 (-callback) 252.99 372 P
1 F
0.69 ( and) 317.79 372 P
0 F
1.66 (-onerror) 342.5 372 P
1 F
0.69 (. The) 400.1 372 P
0 F
1.66 (-callback) 429.14 372 P
1 F
0.69 ( option is) 493.94 372 P
-0.2 (used when the return value from the remote procedure call is of interest to the client, but you want) 72 358 P
0.59 (to use the parallelism provided by) 72 344 P
0 F
1.42 (dp_RDO) 241.54 344 P
1 F
0.59 (. For example, suppose we modify the) 284.74 344 P
0 F
1.42 (Subscribe) 475.2 344 P
1 F
(procedure to return a subscription code that the client uses to identify itself to the server.) 72 330 T
0 10 Q
(A% set code 0) 108 305.33 T
(0) 108 293.33 T
(A% proc Subscribe {} {) 108 281.33 T
(global dp_rpcFile clientList code) 144 269.33 T
(if {[lsearch $clientList $dp_rpcFile] == -1} {) 144 257.33 T
(lappend clientList $dp_rpcFile) 162 245.33 T
(}) 144 233.33 T
(incr code) 144 221.33 T
(return $code) 144 209.33 T
(}) 126 197.33 T
1 12 Q
-0.49 (You might think that the client can not use) 72 170 P
0 F
-1.17 (dp_RDO) 275.27 170 P
1 F
-0.49 ( to call) 318.47 170 P
0 F
-1.17 (Subscribe) 352.67 170 P
1 F
-0.49 ( because it needs to return) 417.47 170 P
1.79 (a value to the caller. The) 72 156 P
0 F
4.31 (-callback) 204.4 156 P
1 F
1.79 ( flag to) 269.2 156 P
0 F
4.31 (dp_RDO) 311.59 156 P
1 F
1.79 ( is designed to handle this case. The) 354.79 156 P
0.29 (argument to) 72 142 P
0 F
0.69 (-callback) 133.24 142 P
1 F
0.29 ( is a Tcl script that is evaluated in the client with the return value from) 198.04 142 P
2.38 (the remote call appended. For example, the following code calls the modified) 72 128 P
0 F
5.72 (Subscribe) 475.2 128 P
72 96 540 111 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 109 225 109 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(3.) 90 89.33 T
-0.37 (That is, assuming the application does not request a return v) 102 89.33 P
-0.37 (alue using the) 338.29 89.33 P
0 F
-0.89 (-callback) 395.23 89.33 P
1 F
-0.37 ( option, described) 449.23 89.33 P
(belo) 102 77.33 T
(w) 118.97 77.33 T
(.) 125.54 77.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "9" 26
%%Page: "8" 27
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(B% dp_RPC $server -events {rpc x} Subscribe) 108 713.33 T
1 12 Q
(Finally, to process all events, use the event type) 72 686 T
0 F
(all) 304.31 686 T
1 F
(:) 325.91 686 T
0 10 Q
(B% dp_RPC $server -events all Subscribe) 108 661.33 T
1 12 Q
-0.51 (A second way to prevent deadlock is to use the) 72 396 P
0 F
-1.22 (-timeout) 295.55 396 P
1 F
-0.51 ( option to) 353.15 396 P
0 F
-1.22 (dp_RPC) 400.64 396 P
1 F
-0.51 (. If the) 443.84 396 P
0 F
-1.22 (dp_RPC) 476.98 396 P
1 F
-0.51 ( call) 520.18 396 P
-0.23 (does not return within the specified timeout, which is given in milliseconds,) 72 382 P
0 F
-0.55 (dp_RPC) 436.59 382 P
1 F
-0.23 ( returns with) 479.79 382 P
1.39 (an error. Since it can trigger an error,) 72 368 P
0 F
3.33 (-timeout) 264.36 368 P
1 F
1.39 ( is typically used in combination with Tcl\325s) 321.96 368 P
0 F
1.83 (catch) 72 354 P
1 F
0.76 ( command. For example, the following code calls the) 108 354 P
0 F
1.83 (Subscribe) 373.17 354 P
1 F
0.76 ( procedure on A, but) 437.97 354 P
(prints a message on the screen if A does not respond within 100 milliseconds.) 72 340 T
0 10 Q
(B% if [catch {dp_RPC $server -timeout 100 Subscribe}] {) 108 315.33 T
(puts \322Couldn\325t register with server\323) 144 303.33 T
(}) 126 291.33 T
1 12 Q
0.71 (As an alternative to catching the error, you can use the) 72 264 P
0 F
1.7 (-timeoutReturn) 344.38 264 P
1 F
0.71 ( option to specify a) 445.18 264 P
0.99 (fragment of Tcl code to be executed if the) 72 250 P
0 F
2.38 (dp_RPC) 285.22 250 P
1 F
0.99 ( call times out. The code is called with the) 328.42 250 P
(connection id of the failed callback appended. The example above could be expressed like this) 72 236 T
0 10 Q
(B% proc HandleTimeout {file} {) 108 211.33 T
(puts \322Couldn\325t register with server\323) 144 199.33 T
(}) 126 187.33 T
(B% dp_RPC $server -timeout 100 -timeoutReturn HandleTimeout Subscribe) 108 175.33 T
1 12 Q
0.06 (The third way to prevent deadlock in Tcl-DP is to use a non-blocking RPC rather than a blocking) 72 148 P
0.28 (RPC. The command) 72 134 P
0 F
0.66 (dp_RDO) 173.5 134 P
1 F
0.28 (, which stands for \322remote do,\323 initiates the RPC but does not wait) 216.7 134 P
1.82 (for a response from the remote interpreter. Instead, it simply sends a message containing the) 72 120 P
(request to the remote interpreter and immediately processes the next command in the script.) 72 106 T
0 F
3.04 (Dp_RDO) 72 78 P
1 F
1.27 ( is ideal for procedure calls that are used for their side effects rather than their return) 115.2 78 P
2 F
(T) 191.13 638 T
(able 1: Ev) 198.03 638 T
(ent types that) 249.25 638 T
5 F
(dp_RPC) 321.57 638 T
2 F
( r) 364.77 638 T
(ecognizes) 372.88 638 T
1 F
(Ev) 82.26 612 T
(ent type) 95.41 612 T
(Meaning) 320.67 612 T
0 F
(x) 78 588 T
1 F
(Ev) 150 588 T
(ents from the X windo) 163.15 588 T
(w system \050created with Tk\325) 270.84 588 T
(s) 401.48 588 T
0 F
(bind) 409.15 588 T
1 F
( command\051) 437.95 588 T
0 F
(file) 78 566 T
1 F
(Ev) 150 566 T
(ents that occur on a \336le or sock) 163.15 566 T
(et \050created with Tcl-DP\325) 312.67 566 T
(s) 428.98 566 T
0 F
(dp_filehandler) 150 552 T
1 F
( command\051.) 250.8 552 T
0 F
(rpc) 78 530 T
1 F
(Same as the \336le e) 150 530 T
(v) 233.69 530 T
(ent type) 239.51 530 T
0 F
(timer) 78 508 T
1 F
(T) 150 508 T
(imer e) 156.91 508 T
(v) 186.94 508 T
(ents \050created with Tk\325) 192.76 508 T
(s) 297.73 508 T
0 F
(after) 305.4 508 T
1 F
( command\051) 341.4 508 T
0 F
(idle) 78 486 T
1 F
(Ev) 150 486 T
(ents that correspond to when-idle e) 163.15 486 T
(v) 331.15 486 T
(ents \050such as display updates, windo) 336.97 486 T
(w) 511.32 486 T
(layout calculations, and tasks schedules with) 150 472 T
0 F
(dp_whenidle) 367.64 472 T
1 F
(\051) 446.84 472 T
0 F
(all) 78 450 T
1 F
(Same as the list) 150 450 T
0 F
({x file timer idle}) 228 450 T
(none) 78 428 T
1 F
(Don\325) 150 428 T
(t process an) 174.44 428 T
(y e) 230.92 428 T
(v) 244.94 428 T
(ents; block) 250.76 428 T
72 627.75 72 420.25 2 L
V
0.5 H
0 Z
N
144 628.25 144 419.75 2 L
V
N
540 627.75 540 420.25 2 L
V
N
71.75 628 540.25 628 2 L
V
N
72.25 603.25 539.75 603.25 2 L
V
N
72.25 600.75 539.75 600.75 2 L
V
N
71.75 580 540.25 580 2 L
V
N
71.75 544 540.25 544 2 L
V
N
71.75 522 540.25 522 2 L
V
N
71.75 500 540.25 500 2 L
V
N
71.75 464 540.25 464 2 L
V
N
71.75 442 540.25 442 2 L
V
N
71.75 420 540.25 420 2 L
V
N
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "8" 27
%%Page: "7" 28
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
0 X
0 0 0 1 0 0 0 K
(We will discuss each mechanism in turn.) 72 712 T
0.05 (The first way to prevent deadlock is to force processes to respond to inbound RPC requests while) 72 684 P
-0.17 (waiting for a previously issued requests to return. If this feature was used in the example above, B) 72 670 P
1.21 (would process the) 72 656 P
0 F
2.89 (puts \322Pleased to meet you\323) 165.27 656 P
1 F
1.21 (call from A while waiting for the) 374.13 656 P
0 F
-0.27 (dp_RPC) 72 642 P
1 F
-0.11 ( call to return. Thus, A\325s RPC to B would return, allowing the remote call to) 115.2 642 P
0 F
-0.27 (Greeting) 482.4 642 P
1 F
0.13 (to return, so that B\325s RPC to A would return. The key to implementing this strategy is to get B to) 72 628 P
(process incoming RPC\325s while waiting for an outstanding RPC to return.) 72 614 T
0 F
-0.68 (Dp_RPC) 72 586 P
1 F
-0.28 ( will process inbound RPCs while waiting for an outbound RPC to complete if it is called) 115.2 586 P
-0.31 (with the) 72 572 P
0 F
-0.75 (-events) 113.38 572 P
1 F
-0.31 ( option. In other words, if we used the following code to call) 163.78 572 P
0 F
-0.75 (Greeting) 453.36 572 P
1 F
-0.31 ( on A,) 510.96 572 P
(the system won\325t deadlock:) 72 558 T
0 10 Q
(B% dp_RPC $server -events rpc Greeting \322Hello there\323) 108 533.33 T
1 12 Q
0.34 (The) 72 506 P
0 F
0.81 (-events) 94 506 P
1 F
0.34 ( option allows B to process inbound) 144.4 506 P
0 F
0.81 (dp_RPC) 322.43 506 P
1 F
0.34 ( calls, but B will be unresponsive to) 365.64 506 P
0.17 (other Tk events, such as events from the window system \050e.g., requests to redraw the screen\051 and) 72 492 P
(timer events \050created using the) 72 478 T
0 F
(after) 222.3 478 T
1 F
( command in Tk\051.) 258.3 478 T
0.11 (To make B responsive to other events while in an RPC, the) 72 450 P
0 F
0.26 (-events) 360.29 450 P
1 F
0.11 ( option can be passed a list) 410.69 450 P
-0.61 (of event types which B should continue to process while waiting for the RPC to return. Table 1 lists) 72 436 P
2.4 (the event types that can be processed with) 72 422 P
0 F
5.76 (-events) 295.82 422 P
1 F
2.4 (. For example, to force B to continue) 346.22 422 P
0.2 (processing events generated by the X window system while waiting for a response from A, the) 72 408 P
0 F
0.48 (x) 532.8 408 P
1 F
(event type is used:) 72 394 T
0 10 Q
(B% dp_RPC $server -events x Subscribe) 108 369.33 T
1 12 Q
(To process timer events, use) 72 342 T
0 F
(timer) 211.31 342 T
1 F
( as the event type:) 247.31 342 T
0 10 Q
(B% dp_RPC $server -events timer Subscribe) 108 317.33 T
1 12 Q
(To process multiple event types, such as RPCs and X events, pass a list to) 72 290 T
0 F
(-events) 429.65 290 T
1 F
(.) 480.05 290 T
72 72 540 213 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
88 100.08 170.15 163.13 R
3 X
0 0 0 1 0 0 0 K
V
81.33 106.18 163.48 169.23 R
7 X
V
0.5 H
0 Z
0 X
N
1 10 Q
(mayo.sandwich.com) 81.89 173.51 T
7 X
90 450 26.27 17.16 123.17 134.78 G
0 X
90 450 26.27 17.16 123.17 134.78 A
1 12 Q
(server) 108.51 131 T
(dpwish A) 103.71 155.71 T
443.01 98.5 525.15 161.55 R
3 X
V
436.33 104.6 518.48 167.65 R
7 X
V
0 X
N
1 10 Q
(lettuce.sandwich.com) 436.89 171.94 T
7 X
90 450 26.27 17.16 478.17 133.2 G
0 X
90 450 26.27 17.16 478.17 133.2 A
1 12 Q
(client) 464.84 129.42 T
(dpwish B) 458.71 154.14 T
445.75 129.5 452.42 137.83 R
3 X
V
0 X
N
148.67 131.08 155.33 139.41 R
3 X
V
0 X
N
72.67 75.61 539.34 88.94 R
7 X
V
0 X
(Figure 2: Deadlock) 259.67 80.94 T
165.42 142.72 166.53 139.97 155.81 138.84 164.3 145.48 4 Y
N
165.42 142.72 166.53 139.97 155.81 138.84 164.3 145.48 4 Y
V
446.25 139.42 M
 398.83 158.67 398.83 158.67 301.74 158.67 D
 212.13 158.67 205.17 158.79 165.65 142.82 D
2 Z
N
435.04 126.96 434.04 129.77 444.81 130.45 436.04 124.16 4 Y
0 Z
N
435.04 126.96 434.04 129.77 444.81 130.45 436.04 124.16 4 Y
V
156.17 129.95 M
 203.29 113.08 203.29 113.08 299.79 113.08 D
 388.66 113.08 395.73 112.96 434.8 126.88 D
2 Z
N
1 10 Q
(puts \322Hello there\323) 264.39 161.94 T
(puts \322Pleased to meet you\323) 247.72 103.6 T
73.5 196.5 538.5 196.5 2 L
1 H
N
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "7" 28
%%Page: "6" 29
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 12 Q
0 X
0 0 0 1 0 0 0 K
-1.31 (Subscribe) 72 712 P
1 F
-0.55 (procedure that clients may call to subscribe to the database which will build this list.) 142.69 712 P
0 10 Q
(A% set clientList {}) 108 687.33 T
(A% proc Subscribe {} {) 108 675.33 T
(global dp_rpcFile clientList) 144 663.33 T
(if {[lsearch $clientList $dp_rpcFile] == -1} {) 144 651.33 T
(lappend clientList $dp_rpcFile) 162 639.33 T
(}) 144 627.33 T
(}) 126 615.33 T
1 12 Q
0.82 (After one or more clients have subscribed, the server can use the following code to broadcast a) 72 588 P
(message to all its subscribers:) 72 574 T
0 10 Q
(A% proc Publish {msg} {) 108 549.33 T
(global clientList) 144 537.33 T
(foreach c $clientList {) 144 525.33 T
(dp_RPC $c puts $msg) 162 513.33 T
(}) 144 501.33 T
(}) 126 489.33 T
1 12 Q
-0.31 (This example brings up a subtle point that can cause your client/server application to deadlock. To) 72 462 P
(illustrate, suppose A contains the following procedure:) 72 448 T
0 10 Q
(A% proc Greeting {msg} {) 108 423.33 T
(global dp_rpcFile) 144 411.33 T
(puts $msg) 144 399.33 T
(dp_RPC $dp_rpcFile puts \322Pleased to meet you\323) 144 387.33 T
(}) 126 375.33 T
1 12 Q
(Now suppose B issues the following call:) 72 348 T
0 10 Q
(B% dp_RPC $server Greeting \322Hello there\323) 108 323.33 T
1 12 Q
-0.31 (The expected behavior is that \322Hello there\323 will appear in A\325s window, and \322Pleased to meet you\323) 72 296 P
0.5 (will appear on B\325s. Instead, both A and B hang because, while waiting for) 72 282 P
0 F
1.21 (dp_RPC) 437.3 282 P
1 F
0.5 ( to return, B) 480.5 282 P
-0.69 (blocks. But, while processing the) 72 268 P
0 F
-1.66 (Greeting) 230.86 268 P
1 F
-0.69 ( call, A issues a) 288.46 268 P
0 F
-1.66 (dp_RPC) 362.99 268 P
1 F
-0.69 ( to B which cases it to block.) 406.19 268 P
0.91 (Since B is stopped waiting for A, and A is stopped waiting for B, the system is) 72 254 P
3 F
0.91 (deadlocked) 468.45 254 P
1 F
0.91 (, as) 523.09 254 P
(shown in figure 2.) 72 240 T
1 9.6 Q
(2) 159.32 244.8 T
1 12 Q
(Tcl-DP provides three mechanisms to prevent deadlock) 72 212 T
(\245) 90 184 T
(the) 108 184 T
0 F
(-events) 125.66 184 T
1 F
( option of) 176.06 184 T
0 F
(dp_RPC) 225.73 184 T
1 F
(\245) 90 156 T
(the) 108 156 T
0 F
(-timeout) 125.66 156 T
1 F
( option of) 183.26 156 T
0 F
(dp_RPC) 232.93 156 T
1 F
(, and) 276.13 156 T
(\245) 90 128 T
(the) 108 128 T
0 F
(dp_RDO) 125.66 128 T
1 F
( procedure.) 168.86 128 T
72 96 540 111 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 109 225 109 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(2.) 90 89.33 T
(If you run this e) 102 89.33 T
(xample, your processes w) 165.73 89.33 T
(on\325) 268.94 89.33 T
(t actually deadlock because Tcl-DP uses a def) 282.09 89.33 T
(ault v) 465.55 89.33 T
(alue for) 487.8 89.33 T
(the) 102 77.33 T
0 F
(-events) 116.72 77.33 T
1 F
( option of) 158.72 77.33 T
0 F
(dp_RPC) 200.11 77.33 T
1 F
(, which is discussed belo) 236.11 77.33 T
(w) 335.02 77.33 T
(, that pre) 341.59 77.33 T
(v) 376.61 77.33 T
(ents deadlock.) 381.46 77.33 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "6" 29
%%Page: "5" 30
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(B% dp_RPC $server set x 5) 108 713.33 T
(5) 108 701.33 T
(B% set y [dp_RPC $server expr {8*$x}]) 108 689.33 T
(40) 108 677.33 T
1 12 Q
2.89 (The curly braces in the) 72 650 P
0 F
6.93 (dp_RPC) 199.42 650 P
1 F
2.89 ( call are needed to prevent the Tcl interpreter in B from) 242.62 650 P
(substituting the local value of) 72 636 T
0 F
(x) 217 636 T
1 F
(, which contains the first line of) 224.2 636 T
0 F
(/etc/passwd) 379.51 636 T
1 F
(.) 458.71 636 T
1.69 (If an error occurs while executing an RPC,) 72 608 P
0 F
4.05 (dp_RPC) 293.77 608 P
1 F
1.69 ( sets the) 336.98 608 P
0 F
4.05 (errorInfo) 383.7 608 P
1 F
1.69 ( and) 448.5 608 P
0 F
4.05 (errorCode) 475.2 608 P
1 F
-0.33 (variables in the originating interpreter and returns with an error. For example, the following call to) 72 594 P
0 F
(dp_RPC) 72 580 T
1 F
( triggers an error since) 115.2 580 T
0 F
(ReadFirstLine) 226.16 580 T
1 F
( requires a file name as a parameter.) 319.76 580 T
0 10 Q
(B% set line1 [dp_RPC $server ReadFirstLine]) 108 555.33 T
(no value given for parameter \322filename\323 to \322ReadFirstLine\323) 108 543.33 T
1 12 Q
(The error is signaled using the standard Tcl mechanisms, exactly as if you had called) 72 516 T
0 F
-1.08 (ReadFirstLine) 72 502 P
1 F
-0.45 ( locally. For example, the error can be trapped using the Tcl) 165.6 502 P
0 F
-1.08 (catch) 450.79 502 P
1 F
-0.45 ( command:) 486.79 502 P
0 10 Q
(if [catch {dp_RPC $server ReadFirstLine /does/not/exist} line1] {) 108 477.33 T
(# Handle error any way you want...) 126 465.33 T
(puts \322Caught error: $errorInfo\323) 126 453.33 T
(puts \322line1: $line1\323) 126 441.33 T
(}) 108 429.33 T
(Caught error: couldn\325t open \322/does/not/exist\323: No such file or directory) 108 417.33 T
(    while executing) 108 405.33 T
(\322open $filename r\323) 108 393.33 T
(    invoked from within) 108 381.33 T
(\322set f [open $filename r]...\323) 108 369.33 T
(    \050procedure \322ReadFirstLine\323 line 2\051) 108 357.33 T
(    invoked from within) 108 345.33 T
(\322ReadFirstLine /does/not/exist\323) 108 333.33 T
(    invoked from within) 108 321.33 T
(\322dp_RPC $server ReadFirstLine /does/not/exist\323) 108 309.33 T
(line1: couldn\325t open \322/does/not/exist\323: No such file or directory) 108 297.33 T
1 12 Q
0.21 (The examples thus far have shown how a client uses) 72 270 P
0 F
0.5 (dp_RPC) 328.71 270 P
1 F
0.21 ( to execute a command in a server.) 371.91 270 P
0.06 (Now suppose the server needs to execute a command in a client. This function might be used, for) 72 256 P
0.95 (instance, to build an application that supports a publish/subscribe paradigm. Clients contact the) 72 242 P
0.74 (server to subscribe to a database, and servers issue callbacks to the clients when the database is) 72 228 P
-0.57 (updated. The server can use) 72 214 P
0 F
-1.36 (dp_RPC) 205.79 214 P
1 F
-0.57 ( to issue such a callback, but in order to do so the server needs) 248.99 214 P
-0.54 (a connection identifier such as) 72 200 P
0 F
-1.29 ($server) 218.27 200 P
1 F
-0.54 (. Where does the server get the identifier for a client? The) 268.67 200 P
(answer is from the) 72 186 T
0 F
(dp_rpcFile) 163.98 186 T
1 F
( variable.) 235.98 186 T
2.21 (Whenever Tcl-DP processes an RPC, it sets a global variable, named) 72 158 P
0 F
5.3 (dp_rpcFile) 430.58 158 P
1 F
2.21 (, to the) 502.58 158 P
3.88 (connection identifier of the incoming RPC for the duration of the call. Servers can use) 72 144 P
0 F
(dp_rpcFile) 72 130 T
1 F
( to identify the source of the call, which can be used to contact the client later.) 144 130 T
-0.52 (For example, suppose you want to write a server that supports the publish/subscribe paradigm. The) 72 102 P
3.07 (server must maintain a list of all clients that have subscribed. The following code uses a) 72 88 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "5" 30
%%Page: "4" 31
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
0 X
0 0 0 1 0 0 0 K
1.21 (connection between the client and the server. The exact value of the identifier may be slightly) 72 712 P
(different on your machine.) 72 698 T
-0.38 (When A receives the connection request on port 4567, it opens a new file in the server that handles) 72 670 P
0.25 (incoming) 72 656 P
0 F
0.59 (dp_RPC) 120.58 656 P
1 F
0.25 ( requests. This leaves port 4567 free for accepting requests from other clients.) 163.78 656 P
(Figure 1\050B\051 show the machine and process architecture after the connection is established.) 72 642 T
0.42 (You can execute a Tcl command in the remote interpreter using this identifier as an argument to) 72 614 P
(the) 72 600 T
0 F
(dp_RPC) 89.66 600 T
1 F
( command. For example, the following command prints \322hello\323 in A\325s window:) 132.86 600 T
0 10 Q
(B% dp_RPC $server puts hello) 108 575.33 T
1 12 Q
0.99 (The extra arguments to) 72 548 P
0 F
2.37 (dp_RPC) 189.93 548 P
1 F
0.99 ( \050after) 233.13 548 P
0 F
2.37 ($server) 267.08 548 P
1 F
0.99 (\051 can be any Tcl command. For example, the) 317.48 548 P
(following RPC creates a procedure in A that returns the first line in a file.) 72 534 T
0 10 Q
(B% dp_RPC $server proc ReadFirstLine {filename} {) 108 509.33 T
(set f [open $filename r]) 144 497.33 T
(set firstline [gets $f]) 144 485.33 T
(close $f) 144 473.33 T
(return $firstline) 144 461.33 T
(}) 126 449.33 T
1 12 Q
(If B executes the following command, the variable) 72 422 T
0 F
(x) 318.29 422 T
1 F
( in B will contain the first line of the file) 325.49 422 T
0 F
(/etc/passwd) 72 408 T
1 F
( on A.) 151.2 408 T
0 10 Q
(B% set x [dp_RPC $server ReadFirstLine /etc/passwd]) 108 383.33 T
(root:r.shdrfURbfwu:0:0:Operator:/:/bin/csh) 108 371.33 T
1 12 Q
0.49 (This example shows an important feature of) 72 344 P
0 F
1.17 (dp_RPC) 289.72 344 P
1 F
0.49 (: the value returned by the) 332.92 344 P
0 F
1.17 (dp_RPC) 464.49 344 P
1 F
0.49 ( call is) 507.69 344 P
-0.41 (the value returned by the command executed on A. As another example, the following sequence of) 72 330 P
1.4 (commands creates a variable) 72 316 P
0 F
3.37 (x) 218.9 316 P
1 F
1.4 ( in A, computes 8 times its value, and assigns the result to the) 226.1 316 P
(variable) 72 302 T
0 F
(y) 113.65 302 T
1 F
( in B:) 120.85 302 T
72 72 540 228.33 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
307.51 132.4 389.65 195.45 R
3 X
0 0 0 1 0 0 0 K
V
300.83 138.51 382.98 201.56 R
7 X
V
0.5 H
0 Z
0 X
N
1 10 Q
(mayo.sandwich.com) 301.39 205.84 T
7 X
90 450 26.27 17.16 342.67 167.11 G
0 X
90 450 26.27 17.16 342.67 167.11 A
1 12 Q
(server) 328.01 163.33 T
(dpwish A) 323.21 188.04 T
367.38 162.33 372.41 157.97 366.96 151.67 361.92 156.03 4 Y
3 X
V
0 X
N
(port 4567) 273.83 119.5 T
360.87 140.26 358 141.04 363.6 150.29 363.75 139.48 4 Y
N
360.87 140.26 358 141.04 363.6 150.29 363.75 139.48 4 Y
V
360.81 140.02 M
 357.62 128.28 340.51 122 323.83 122 D
2 Z
N
117.84 132.4 199.98 195.45 R
3 X
V
111.17 138.51 193.31 201.56 R
7 X
V
0 Z
0 X
N
1 10 Q
(mayo.sandwich.com) 111.72 205.84 T
7 X
90 450 26.27 17.16 153 167.11 G
0 X
90 450 26.27 17.16 153 167.11 A
1 12 Q
(server) 138.35 163.33 T
(dpwish A) 133.54 188.04 T
177.71 162.33 182.75 157.97 177.29 151.67 172.25 156.03 4 Y
3 X
V
0 X
N
(port 4567) 84.17 119.5 T
171.21 140.26 168.33 141.04 173.93 150.29 174.08 139.48 4 Y
N
171.21 140.26 168.33 141.04 173.93 150.29 174.08 139.48 4 Y
V
171.14 140.02 M
 167.96 128.28 150.84 122 134.17 122 D
2 Z
N
437.01 132.4 519.15 195.45 R
3 X
V
430.33 138.51 512.48 201.56 R
7 X
V
0 Z
0 X
N
1 10 Q
(lettuce.sandwich.com) 430.89 205.84 T
7 X
90 450 26.27 17.16 472.17 167.11 G
0 X
90 450 26.27 17.16 472.17 167.11 A
1 12 Q
(client) 458.84 163.33 T
(dpwish B) 452.71 188.04 T
438.5 163.4 445.17 171.74 R
3 X
V
0 X
N
385.95 166.9 385.95 163.93 375.58 166.9 385.95 169.88 4 Y
N
385.95 166.9 385.95 163.93 375.58 166.9 385.95 169.88 4 Y
V
427.55 166.9 427.55 169.88 437.93 166.9 427.55 163.93 4 Y
N
427.55 166.9 427.55 169.88 437.93 166.9 427.55 163.93 4 Y
V
386.2 166.9 427.3 166.9 2 L
3 X
V
0 X
N
368.17 163.4 374.83 171.74 R
3 X
V
0 X
N
(file4) 470.17 121.83 T
443.92 149.77 440.96 149.44 442.77 160.1 446.89 150.1 4 Y
N
443.92 149.77 440.96 149.44 442.77 160.1 446.89 150.1 4 Y
V
466 126 M
 455.8 126 445.51 135.55 443.95 149.52 D
2 Z
N
1 18 Q
(\050B\051) 396.83 106.5 T
(\050A\051) 139 106.5 T
72.22 77.55 538.89 90.88 R
7 X
V
1 12 Q
0 X
(Figure 1: Connection setup) 240.39 82.88 T
73.5 222.17 538.5 222.17 2 L
1 H
N
0 0 612 792 C
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "4" 31
%%Page: "3" 32
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 10 Q
0 X
0 0 0 1 0 0 0 K
(proc PromptB {} {puts -nonewline \322B% \322}) 108 713.33 T
(set tcl_prompt1 PromptB) 108 701.33 T
1 12 Q
-0.58 (The prompt for A and B should now be \322A%\323 and \322B%\323, respectively. In the examples that follow,) 72 674 P
0.19 (the prompt indicates in which) 72 660 P
0 F
0.46 (dpwish) 218.62 660 P
1 F
0.19 ( the example commands are to be executed. We will refer) 261.82 660 P
(to the processes as A and B.) 72 646 T
0.22 (The remainder of this chapter is divided into three sections. The first section summarizes Tcl-DP) 72 618 P
-0.66 (functions for creating client/server applications. After reading this section, you will be able to write) 72 604 P
2.91 (robust distributed applications using Tcl-DP. The second section describes the socket level) 72 590 P
-0.38 (communication primitives in Tcl-DP. After reading this section, you will know how to use sockets) 72 576 P
(and event handling. The third section describes the Tcl-DP distributed object system.) 72 562 T
-0.5 (We assume that the reader is already familiar with Tcl/Tk.If not, the books by John Ousterhout and) 72 534 P
-0.28 (Brent Welch [ref,ref] provide excellent introductions. We also assume the user is familiar with the) 72 520 P
-0.41 (basic properties of Internet protocols like TCP/IP and UDP/IP, and has a superficial understanding) 72 506 P
-0.21 (of the Berkeley socket abstraction. The book by Stevens [ref] provides more information than you) 72 492 P
(need to know on these topics.) 72 478 T
-0.02 (Each section alternates between presenting a group of Tcl-DP functions and integrating them into) 72 450 P
(an example program \050a distributed whiteboard\051 that shows them in use.) 72 436 T
2 18 Q
(Client/Ser) 72 400 T
(v) 149.81 400 T
(er Ar) 158.63 400 T
(chitectur) 199.78 400 T
(es in Tcl-DP) 268.43 400 T
1 12 Q
-0.35 (The most important feature of Tcl-DP is that it simplifies the creation of client/server applications.) 72 369 P
(For example, the following commands make A a server:) 72 355 T
0 10 Q
(A% dp_MakeRPCServer 4567) 108 330.33 T
(4567) 108 318.33 T
0 12 Q
-0.94 (Dp_MakeRPCServer) 72 291 P
1 F
-0.39 ( turns a process into a server listening on port 4567. The system will select) 187.2 291 P
-0.45 (a port number for you if you omit the port number or specify 0 as the port number. The chosen port) 72 277 P
-0.11 (number is returned, whether or not you specify it. The machine and process configuration is show) 72 263 P
(in figure 1\050A\051.) 72 249 T
7.52 (A client connects to a Tcl-DP server using the) 72 221 P
0 F
18.04 (dp_MakeRPCClient) 363.95 221 P
1 F
7.52 ( command.) 479.15 221 P
0 F
0.83 (Dp_MakeRPCClient) 72 207 P
1 F
0.35 ( takes two arguments: 1\051 the machine on which the server is running and) 187.2 207 P
1.09 (2\051 the port number on which the server will listen for client connection requests. For example,) 72 193 P
-0.1 (suppose the name of the machine that A is running on is) 72 179 P
0 F
-0.23 (mayo.sandwich.com) 343.47 179 P
1 F
-0.1 (. The following) 465.87 179 P
(command will make B a client of A.) 72 165 T
0 10 Q
(B% set server [dp_MakeRPCClient mayo.sandwich.com 4567]) 108 140.33 T
(file4) 108 128.33 T
(B%) 108 116.33 T
1 12 Q
2.24 (The return value of) 72 89 P
0 F
5.39 (dp_MakeRPCClient) 176.28 89 P
1 F
2.24 (,) 291.48 89 P
0 F
5.39 (file4) 299.73 89 P
1 F
2.24 ( in this example, is an identifier for the) 335.73 89 P
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "3" 32
%%Page: "2" 33
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
1 12 Q
0 X
0 0 0 1 0 0 0 K
1.18 (Any command or script can be substituted in place of the) 72 712 P
0 F
2.84 (GetId) 361.96 712 P
1 F
1.18 ( command. For example, the) 397.96 712 P
(commands) 72 698 T
0 10 Q
(dp_RPC $server info tclversion) 108 673.33 T
(dp_RPC $server info procs dp_*) 108 661.33 T
1 12 Q
0.04 (return the version of Tcl that is running in the server process and all the Tcl-DP procedures in the) 72 634 P
-0.26 (server, respectively. Below, we will describe how a server can limit what machines can connect to) 72 620 P
(it and what commands a client can execute.) 72 606 T
0 F
-1.56 (Dp_RPC) 72 578 P
1 F
-0.65 ( is similar to the) 115.2 578 P
0 F
-1.56 (send) 192.29 578 P
1 F
-0.65 ( command in Tk. The primary difference is that) 221.09 578 P
0 F
-1.56 (send) 446.51 578 P
1 F
-0.65 ( requires both) 475.31 578 P
-0.26 (processes to be connected to an X server to communicate, while) 72 564 P
0 F
-0.63 (dp_RPC) 379.72 564 P
1 F
-0.26 ( can be run without an X) 422.92 564 P
0.09 (server. Because) 72 550 P
0 F
0.21 (dp_RPC) 150.48 550 P
1 F
0.09 ( does not use the X server for communication, it\325s faster than) 193.68 550 P
0 F
0.21 (send) 491.03 550 P
1 F
0.09 ( -- 3) 519.83 550 P
(to 5 times faster for most commands.) 72 536 T
134.03 508.8 72 508.8 2 L
V
0.6 H
0 Z
N
4 F
(Getting star) 72 510 T
151.19 508.8 134.51 508.8 2 L
V
N
(ted) 134.51 510 T
1 F
0.4 (This chapter is designed to be used interactively. That is, although you can just read the chapter,) 72 482 P
0.29 (you will get more out of it by trying out the commands as you read them. In order to run Tcl-DP) 72 468 P
-0.21 (scripts, you must run a) 72 454 P
0 F
-0.51 (wish) 182.93 454 P
1 F
-0.21 ( that has been extended with Tcl-DP. This extension can be retrieved) 211.74 454 P
(from) 72 440 T
0 10 Q
(ftp://ftp.cs.cornell.edu/pub/tcl-dp/tcl-dp3.3.tar.gz) 108 415.33 T
1 12 Q
-0.61 (The distribution includes source code, instructions and scripts to configure, compile, and install the) 72 388 P
2.8 (system, and Unix manual pages and several examples that document the system. The files) 72 374 P
(README and INSTALL describe the distribution and how to make it.) 72 360 T
0.41 (Once installed, you can use the shell application called) 72 332 P
0 F
0.98 (dpwish) 341.61 332 P
1 F
0.41 ( to try out the commands in this) 384.81 332 P
(chapter. Type the command) 72 318 T
0 10 Q
(dpwish) 108 293.33 T
1 12 Q
2.39 (to your shell to invoke) 72 266 P
0 F
5.74 (dpwish) 194.95 266 P
1 F
2.39 (, which behaves like an ordinary) 238.15 266 P
0 F
5.74 (wish) 411.45 266 P
1 F
2.39 ( interpreter, reading) 440.25 266 P
(commands from standard input and writing the results to standard output.) 72 252 T
2.74 (Since Tcl-DP is intended for communicating applications, a second) 72 224 P
0 F
6.58 (dpwish) 423.31 224 P
1 F
2.74 ( simplifies the) 466.51 224 P
0.33 (examples. In another window on your machine, start up a second) 72 210 P
0 F
0.78 (dpwish) 390.52 210 P
1 F
0.33 (. We will call the first) 433.72 210 P
0.29 (interpreter \322A\323 and the second \322B.\323 To help you distinguish the interpreters, we recommend that) 72 196 P
(you change the prompt of each interpreter. In A, use the following Tcl commands:) 72 182 T
0 10 Q
(proc PromptA {} {puts -nonewline \322A% \322}) 108 157.33 T
(set tcl_prompt1 PromptA) 108 145.33 T
1 12 Q
(Use these commands in B:) 72 118 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "2" 33
%%Page: "1" 34
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 0 0 0 1 1 1]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 8 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
2 18 Q
0 X
0 0 0 1 0 0 0 K
(An Intr) 201.74 708 T
(oduction T) 259.91 708 T
(o Tcl-DP) 341.77 708 T
3 12 Q
(Brian Smith, Cornell University \050bsmith@cs.cornell.edu\051) 168.65 676 T
(Lawrence A. Rowe, University of California at Berkeley \050larry@cs.berkeley.edu\051) 111.51 662 T
1 F
-0.57 (This document describes the Distributed Programming extension to Tcl/Tk, called Tcl-DP. Tcl-DP) 72 634 P
0.31 (is a scripting language for writing client/server applications using Internet protocols and sockets.) 72 620 P
1.93 (As with Tcl, the goal is ease of programming for applications, not maximal performance. In) 72 606 P
(particular, Tcl-DP provides the following features:) 72 592 T
(1.) 90 564 T
(Reliable Remote Procedure Call \050RPC\051) 108 564 T
(2.) 90 550 T
(Automatic cleanup on \336le close and program e) 108 550 T
(xit) 332.11 550 T
(3.) 90 536 T
(A name serv) 108 536 T
(er for locating, starting, and authenticating serv) 168.47 536 T
(ers.) 395.58 536 T
(4.) 90 522 T
(Ev) 108 522 T
(ent handling functions) 121.15 522 T
(5.) 90 508 T
(Support for TCP) 108 508 T
(, UDP) 186.67 508 T
(, and IP-multicast transport protocols) 215.34 508 T
(6.) 90 494 T
(Sock) 108 494 T
(et con\336guration primiti) 131.88 494 T
(v) 242.92 494 T
(es) 248.74 494 T
(7.) 90 480 T
(Interf) 108 480 T
(aces to DNS lookup functions that map machine names to IP addresses.) 134.53 480 T
-0.11 (The following script will give you a feel for the power of Tcl-DP. It uses Tcl-DP\325s RPC functions) 72 452 P
(to implement a trivial \322id server\323 that returns unique identifiers in response to) 72 438 T
0 F
(GetID) 448.28 438 T
1 F
( requests:) 484.28 438 T
0 10 Q
(set myId 0) 108 413.33 T
(proc GetId {} {) 108 401.33 T
(global myId) 126 389.33 T
(incr myId) 126 377.33 T
(return $myId) 126 365.33 T
(}) 108 353.33 T
(dp_MakeRPCServer 4545) 108 341.33 T
1 12 Q
0.43 (All of the code in this script except the last line is ordinary Tcl code. It defines a global variable) 72 314 P
0 F
8.51 (myId) 72 300 P
1 F
3.54 ( and a procedure) 100.8 300 P
0 F
8.51 (GetId) 197.61 300 P
1 F
3.54 ( that increments the variable and returns the next id. The) 233.61 300 P
0 F
1.69 (dp_MakeRPCServer) 72 286 P
1 F
0.7 ( command is part of Tcl-DP; it causes the application to listen for client) 187.2 286 P
(requests on a TCP socket \050port 4545\051) 72 272 T
1 9.6 Q
(1) 250.64 276.8 T
1 12 Q
(.) 255.44 272 T
(Other Tcl applications communicate with this server using scripts that look like the following:) 72 244 T
0 10 Q
(set server [dp_MakeRPCClient server.company.com 4545]) 108 219.33 T
(dp_RPC $server GetId) 108 207.33 T
1 12 Q
0.22 (The first command opens a connection to the id server and saves a reference to the connection in) 72 180 P
-0.22 (the variable) 72 166 P
0 F
-0.54 (server) 130.87 166 P
1 F
-0.22 (. The arguments to) 174.07 166 P
0 F
-0.54 (dp_MakeRPCClient) 266.17 166 P
1 F
-0.22 ( identify the server\325s host and the) 381.37 166 P
0.25 (port on which the server is listening. The) 72 152 P
0 F
0.61 (dp_RPC) 273.67 152 P
1 F
0.25 ( command, whose arguments are a connection) 316.87 152 P
-0.62 (and an arbitrary Tcl command, performs a remote procedure call.) 72 138 P
0 F
-1.49 (Dp_RPC) 382.35 138 P
1 F
-0.62 ( forwards this command) 425.55 138 P
1.41 (to the server, which executes the script and returns a result \050a new id in this case\051. The value) 72 124 P
(returned by the server is the value returned by the) 72 110 T
0 F
(dp_RPC) 313.27 110 T
1 F
( command.) 356.47 110 T
72 86 540 101 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
81 99 225 99 2 L
0.5 H
2 Z
0 X
0 0 0 1 0 0 0 K
N
0 0 612 792 C
1 10 Q
0 X
0 0 0 1 0 0 0 K
(1.) 90 78 T
1 12 Q
(All commands in the Tcl-DP extension begin with \322dp_\323) 102 78 T
0 0 0 1 0 0 0 K
FMENDPAGE
%%EndPage: "1" 34
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Descend
%%Pages: 34
%%DocumentFonts: Courier
%%+ Times-Roman
%%+ Times-Bold
%%+ Times-Italic
%%+ Helvetica-Oblique
%%+ Courier-Bold
%%EOF
